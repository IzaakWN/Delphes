#define private public
#define protected public

/** \class
 *
 *  Lists classes to be included in cint dicitonary
 *
 *  $Date: 2013-07-04 13:19:15 +0200 (Thu, 04 Jul 2013) $
 *  $Revision: 1177 $
 *
 *
 *  \author P. Demin - UCL, Louvain-la-Neuve
 *
 */

#include "modules/Delphes.h"

#include "modules/FastJetFinder.h"
#include "modules/ParticlePropagator.h"
#include "modules/Efficiency.h"
#include "modules/EnergySmearing.h"
#include "modules/MomentumSmearing.h"
#include "modules/Calorimeter.h"
#include "modules/Isolation.h"
#include "modules/IsoTrackFilter.h"
#include "modules/EnergyScale.h"
#include "modules/UniqueObjectFinder.h"
#include "modules/BTagging.h"
#include "modules/TauTagging.h"
#include "modules/TreeWriter.h"
#include "modules/Merger.h"
#include "modules/LeptonDressing.h"
#include "modules/PileUpMerger.h"
#include "modules/JetPileUpSubtractor.h"
#include "modules/TrackPileUpSubtractor.h"
#include "modules/ConstituentFilter.h"
#include "modules/StatusPidFilter.h"
#include "modules/Cloner.h"
#include "modules/Weighter.h"
#include "modules/ExampleModule.h"

//#include "modules/CleansedJetFinder.h"
#include "modules/PileUpJetID.h"
#include "modules/ModifyBeamSpot.h"
#include "modules/GenBeamSpotFilter.h"
#include "modules/RunPUPPI.h"
#include "modules/NeutrinoFilter.h"

#ifdef __CINT__

#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ class Delphes+;

#pragma link C++ class FastJetFinder+;
#pragma link C++ class ParticlePropagator+;
#pragma link C++ class Efficiency+;
#pragma link C++ class EnergySmearing+;
#pragma link C++ class MomentumSmearing+;
#pragma link C++ class Calorimeter+;
#pragma link C++ class Isolation+;
#pragma link C++ class IsoTrackFilter+;
#pragma link C++ class EnergyScale+;
#pragma link C++ class UniqueObjectFinder+;
#pragma link C++ class BTagging+;
#pragma link C++ class TauTagging+;
#pragma link C++ class TreeWriter+;
#pragma link C++ class Merger+;
#pragma link C++ class LeptonDressing+;
#pragma link C++ class PileUpMerger+;
#pragma link C++ class JetPileUpSubtractor+;
#pragma link C++ class TrackPileUpSubtractor+;
#pragma link C++ class ConstituentFilter+;
#pragma link C++ class StatusPidFilter+;
#pragma link C++ class Cloner+;
#pragma link C++ class Weighter+;
#pragma link C++ class ExampleModule+;

//#pragma link C++ class CleansedJetFinder+;
#pragma link C++ class PileUpJetID+;
#pragma link C++ class ModifyBeamSpot+;
#pragma link C++ class GenBeamSpotFilter+;
#pragma link C++ class RunPUPPI+;
#pragma link C++ class NeutrinoFilter+;

#endif
//
// File generated by rootcint at Thu Apr 16 15:26:52 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME tmpdImodulesdIModulesDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ModulesDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void Delphes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Delphes(void *p = 0);
   static void *newArray_Delphes(Long_t size, void *p);
   static void delete_Delphes(void *p);
   static void deleteArray_Delphes(void *p);
   static void destruct_Delphes(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Delphes*)
   {
      ::Delphes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Delphes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Delphes", ::Delphes::Class_Version(), "./modules/Delphes.h", 27,
                  typeid(::Delphes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Delphes::Dictionary, isa_proxy, 4,
                  sizeof(::Delphes) );
      instance.SetNew(&new_Delphes);
      instance.SetNewArray(&newArray_Delphes);
      instance.SetDelete(&delete_Delphes);
      instance.SetDeleteArray(&deleteArray_Delphes);
      instance.SetDestructor(&destruct_Delphes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Delphes*)
   {
      return GenerateInitInstanceLocal((::Delphes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Delphes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void FastJetFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FastJetFinder(void *p = 0);
   static void *newArray_FastJetFinder(Long_t size, void *p);
   static void delete_FastJetFinder(void *p);
   static void deleteArray_FastJetFinder(void *p);
   static void destruct_FastJetFinder(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::FastJetFinder*)
   {
      ::FastJetFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FastJetFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FastJetFinder", ::FastJetFinder::Class_Version(), "./modules/FastJetFinder.h", 30,
                  typeid(::FastJetFinder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::FastJetFinder::Dictionary, isa_proxy, 4,
                  sizeof(::FastJetFinder) );
      instance.SetNew(&new_FastJetFinder);
      instance.SetNewArray(&newArray_FastJetFinder);
      instance.SetDelete(&delete_FastJetFinder);
      instance.SetDeleteArray(&deleteArray_FastJetFinder);
      instance.SetDestructor(&destruct_FastJetFinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::FastJetFinder*)
   {
      return GenerateInitInstanceLocal((::FastJetFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FastJetFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ParticlePropagator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ParticlePropagator(void *p = 0);
   static void *newArray_ParticlePropagator(Long_t size, void *p);
   static void delete_ParticlePropagator(void *p);
   static void deleteArray_ParticlePropagator(void *p);
   static void destruct_ParticlePropagator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ParticlePropagator*)
   {
      ::ParticlePropagator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ParticlePropagator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ParticlePropagator", ::ParticlePropagator::Class_Version(), "./modules/ParticlePropagator.h", 25,
                  typeid(::ParticlePropagator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ParticlePropagator::Dictionary, isa_proxy, 4,
                  sizeof(::ParticlePropagator) );
      instance.SetNew(&new_ParticlePropagator);
      instance.SetNewArray(&newArray_ParticlePropagator);
      instance.SetDelete(&delete_ParticlePropagator);
      instance.SetDeleteArray(&deleteArray_ParticlePropagator);
      instance.SetDestructor(&destruct_ParticlePropagator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ParticlePropagator*)
   {
      return GenerateInitInstanceLocal((::ParticlePropagator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Efficiency_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Efficiency(void *p = 0);
   static void *newArray_Efficiency(Long_t size, void *p);
   static void delete_Efficiency(void *p);
   static void deleteArray_Efficiency(void *p);
   static void destruct_Efficiency(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Efficiency*)
   {
      ::Efficiency *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Efficiency >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Efficiency", ::Efficiency::Class_Version(), "./modules/Efficiency.h", 23,
                  typeid(::Efficiency), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Efficiency::Dictionary, isa_proxy, 4,
                  sizeof(::Efficiency) );
      instance.SetNew(&new_Efficiency);
      instance.SetNewArray(&newArray_Efficiency);
      instance.SetDelete(&delete_Efficiency);
      instance.SetDeleteArray(&deleteArray_Efficiency);
      instance.SetDestructor(&destruct_Efficiency);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Efficiency*)
   {
      return GenerateInitInstanceLocal((::Efficiency*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Efficiency*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EnergySmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EnergySmearing(void *p = 0);
   static void *newArray_EnergySmearing(Long_t size, void *p);
   static void delete_EnergySmearing(void *p);
   static void deleteArray_EnergySmearing(void *p);
   static void destruct_EnergySmearing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EnergySmearing*)
   {
      ::EnergySmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EnergySmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EnergySmearing", ::EnergySmearing::Class_Version(), "./modules/EnergySmearing.h", 23,
                  typeid(::EnergySmearing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EnergySmearing::Dictionary, isa_proxy, 4,
                  sizeof(::EnergySmearing) );
      instance.SetNew(&new_EnergySmearing);
      instance.SetNewArray(&newArray_EnergySmearing);
      instance.SetDelete(&delete_EnergySmearing);
      instance.SetDeleteArray(&deleteArray_EnergySmearing);
      instance.SetDestructor(&destruct_EnergySmearing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EnergySmearing*)
   {
      return GenerateInitInstanceLocal((::EnergySmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EnergySmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MomentumSmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MomentumSmearing(void *p = 0);
   static void *newArray_MomentumSmearing(Long_t size, void *p);
   static void delete_MomentumSmearing(void *p);
   static void deleteArray_MomentumSmearing(void *p);
   static void destruct_MomentumSmearing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MomentumSmearing*)
   {
      ::MomentumSmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MomentumSmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MomentumSmearing", ::MomentumSmearing::Class_Version(), "./modules/MomentumSmearing.h", 23,
                  typeid(::MomentumSmearing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MomentumSmearing::Dictionary, isa_proxy, 4,
                  sizeof(::MomentumSmearing) );
      instance.SetNew(&new_MomentumSmearing);
      instance.SetNewArray(&newArray_MomentumSmearing);
      instance.SetDelete(&delete_MomentumSmearing);
      instance.SetDeleteArray(&deleteArray_MomentumSmearing);
      instance.SetDestructor(&destruct_MomentumSmearing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MomentumSmearing*)
   {
      return GenerateInitInstanceLocal((::MomentumSmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Calorimeter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Calorimeter(void *p = 0);
   static void *newArray_Calorimeter(Long_t size, void *p);
   static void delete_Calorimeter(void *p);
   static void deleteArray_Calorimeter(void *p);
   static void destruct_Calorimeter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Calorimeter*)
   {
      ::Calorimeter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Calorimeter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Calorimeter", ::Calorimeter::Class_Version(), "./modules/Calorimeter.h", 28,
                  typeid(::Calorimeter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Calorimeter::Dictionary, isa_proxy, 4,
                  sizeof(::Calorimeter) );
      instance.SetNew(&new_Calorimeter);
      instance.SetNewArray(&newArray_Calorimeter);
      instance.SetDelete(&delete_Calorimeter);
      instance.SetDeleteArray(&deleteArray_Calorimeter);
      instance.SetDestructor(&destruct_Calorimeter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Calorimeter*)
   {
      return GenerateInitInstanceLocal((::Calorimeter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Calorimeter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Isolation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Isolation(void *p = 0);
   static void *newArray_Isolation(Long_t size, void *p);
   static void delete_Isolation(void *p);
   static void deleteArray_Isolation(void *p);
   static void destruct_Isolation(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Isolation*)
   {
      ::Isolation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Isolation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Isolation", ::Isolation::Class_Version(), "./modules/Isolation.h", 27,
                  typeid(::Isolation), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Isolation::Dictionary, isa_proxy, 4,
                  sizeof(::Isolation) );
      instance.SetNew(&new_Isolation);
      instance.SetNewArray(&newArray_Isolation);
      instance.SetDelete(&delete_Isolation);
      instance.SetDeleteArray(&deleteArray_Isolation);
      instance.SetDestructor(&destruct_Isolation);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Isolation*)
   {
      return GenerateInitInstanceLocal((::Isolation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Isolation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void IsoTrackFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_IsoTrackFilter(void *p = 0);
   static void *newArray_IsoTrackFilter(Long_t size, void *p);
   static void delete_IsoTrackFilter(void *p);
   static void deleteArray_IsoTrackFilter(void *p);
   static void destruct_IsoTrackFilter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::IsoTrackFilter*)
   {
      ::IsoTrackFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::IsoTrackFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("IsoTrackFilter", ::IsoTrackFilter::Class_Version(), "./modules/IsoTrackFilter.h", 27,
                  typeid(::IsoTrackFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::IsoTrackFilter::Dictionary, isa_proxy, 4,
                  sizeof(::IsoTrackFilter) );
      instance.SetNew(&new_IsoTrackFilter);
      instance.SetNewArray(&newArray_IsoTrackFilter);
      instance.SetDelete(&delete_IsoTrackFilter);
      instance.SetDeleteArray(&deleteArray_IsoTrackFilter);
      instance.SetDestructor(&destruct_IsoTrackFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::IsoTrackFilter*)
   {
      return GenerateInitInstanceLocal((::IsoTrackFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::IsoTrackFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void EnergyScale_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EnergyScale(void *p = 0);
   static void *newArray_EnergyScale(Long_t size, void *p);
   static void delete_EnergyScale(void *p);
   static void deleteArray_EnergyScale(void *p);
   static void destruct_EnergyScale(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::EnergyScale*)
   {
      ::EnergyScale *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EnergyScale >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EnergyScale", ::EnergyScale::Class_Version(), "./modules/EnergyScale.h", 23,
                  typeid(::EnergyScale), ::ROOT::DefineBehavior(ptr, ptr),
                  &::EnergyScale::Dictionary, isa_proxy, 4,
                  sizeof(::EnergyScale) );
      instance.SetNew(&new_EnergyScale);
      instance.SetNewArray(&newArray_EnergyScale);
      instance.SetDelete(&delete_EnergyScale);
      instance.SetDeleteArray(&deleteArray_EnergyScale);
      instance.SetDestructor(&destruct_EnergyScale);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::EnergyScale*)
   {
      return GenerateInitInstanceLocal((::EnergyScale*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EnergyScale*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void UniqueObjectFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_UniqueObjectFinder(void *p = 0);
   static void *newArray_UniqueObjectFinder(Long_t size, void *p);
   static void delete_UniqueObjectFinder(void *p);
   static void deleteArray_UniqueObjectFinder(void *p);
   static void destruct_UniqueObjectFinder(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::UniqueObjectFinder*)
   {
      ::UniqueObjectFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::UniqueObjectFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("UniqueObjectFinder", ::UniqueObjectFinder::Class_Version(), "./modules/UniqueObjectFinder.h", 25,
                  typeid(::UniqueObjectFinder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::UniqueObjectFinder::Dictionary, isa_proxy, 4,
                  sizeof(::UniqueObjectFinder) );
      instance.SetNew(&new_UniqueObjectFinder);
      instance.SetNewArray(&newArray_UniqueObjectFinder);
      instance.SetDelete(&delete_UniqueObjectFinder);
      instance.SetDeleteArray(&deleteArray_UniqueObjectFinder);
      instance.SetDestructor(&destruct_UniqueObjectFinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::UniqueObjectFinder*)
   {
      return GenerateInitInstanceLocal((::UniqueObjectFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void BTagging_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BTagging(void *p = 0);
   static void *newArray_BTagging(Long_t size, void *p);
   static void delete_BTagging(void *p);
   static void deleteArray_BTagging(void *p);
   static void destruct_BTagging(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::BTagging*)
   {
      ::BTagging *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BTagging >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BTagging", ::BTagging::Class_Version(), "./modules/BTagging.h", 29,
                  typeid(::BTagging), ::ROOT::DefineBehavior(ptr, ptr),
                  &::BTagging::Dictionary, isa_proxy, 4,
                  sizeof(::BTagging) );
      instance.SetNew(&new_BTagging);
      instance.SetNewArray(&newArray_BTagging);
      instance.SetDelete(&delete_BTagging);
      instance.SetDeleteArray(&deleteArray_BTagging);
      instance.SetDestructor(&destruct_BTagging);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::BTagging*)
   {
      return GenerateInitInstanceLocal((::BTagging*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BTagging*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TauTagging_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TauTagging(void *p = 0);
   static void *newArray_TauTagging(Long_t size, void *p);
   static void delete_TauTagging(void *p);
   static void deleteArray_TauTagging(void *p);
   static void destruct_TauTagging(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TauTagging*)
   {
      ::TauTagging *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TauTagging >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TauTagging", ::TauTagging::Class_Version(), "./modules/TauTagging.h", 29,
                  typeid(::TauTagging), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TauTagging::Dictionary, isa_proxy, 4,
                  sizeof(::TauTagging) );
      instance.SetNew(&new_TauTagging);
      instance.SetNewArray(&newArray_TauTagging);
      instance.SetDelete(&delete_TauTagging);
      instance.SetDeleteArray(&deleteArray_TauTagging);
      instance.SetDestructor(&destruct_TauTagging);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TauTagging*)
   {
      return GenerateInitInstanceLocal((::TauTagging*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TauTagging*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TreeWriter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TreeWriter(void *p = 0);
   static void *newArray_TreeWriter(Long_t size, void *p);
   static void delete_TreeWriter(void *p);
   static void deleteArray_TreeWriter(void *p);
   static void destruct_TreeWriter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeWriter*)
   {
      ::TreeWriter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TreeWriter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeWriter", ::TreeWriter::Class_Version(), "./modules/TreeWriter.h", 28,
                  typeid(::TreeWriter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TreeWriter::Dictionary, isa_proxy, 4,
                  sizeof(::TreeWriter) );
      instance.SetNew(&new_TreeWriter);
      instance.SetNewArray(&newArray_TreeWriter);
      instance.SetDelete(&delete_TreeWriter);
      instance.SetDeleteArray(&deleteArray_TreeWriter);
      instance.SetDestructor(&destruct_TreeWriter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TreeWriter*)
   {
      return GenerateInitInstanceLocal((::TreeWriter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeWriter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Merger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Merger(void *p = 0);
   static void *newArray_Merger(Long_t size, void *p);
   static void delete_Merger(void *p);
   static void deleteArray_Merger(void *p);
   static void destruct_Merger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Merger*)
   {
      ::Merger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Merger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Merger", ::Merger::Class_Version(), "./modules/Merger.h", 26,
                  typeid(::Merger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Merger::Dictionary, isa_proxy, 4,
                  sizeof(::Merger) );
      instance.SetNew(&new_Merger);
      instance.SetNewArray(&newArray_Merger);
      instance.SetDelete(&delete_Merger);
      instance.SetDeleteArray(&deleteArray_Merger);
      instance.SetDestructor(&destruct_Merger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Merger*)
   {
      return GenerateInitInstanceLocal((::Merger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Merger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void LeptonDressing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LeptonDressing(void *p = 0);
   static void *newArray_LeptonDressing(Long_t size, void *p);
   static void delete_LeptonDressing(void *p);
   static void deleteArray_LeptonDressing(void *p);
   static void destruct_LeptonDressing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LeptonDressing*)
   {
      ::LeptonDressing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LeptonDressing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LeptonDressing", ::LeptonDressing::Class_Version(), "./modules/LeptonDressing.h", 17,
                  typeid(::LeptonDressing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::LeptonDressing::Dictionary, isa_proxy, 4,
                  sizeof(::LeptonDressing) );
      instance.SetNew(&new_LeptonDressing);
      instance.SetNewArray(&newArray_LeptonDressing);
      instance.SetDelete(&delete_LeptonDressing);
      instance.SetDeleteArray(&deleteArray_LeptonDressing);
      instance.SetDestructor(&destruct_LeptonDressing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LeptonDressing*)
   {
      return GenerateInitInstanceLocal((::LeptonDressing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LeptonDressing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void PileUpMerger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PileUpMerger(void *p = 0);
   static void *newArray_PileUpMerger(Long_t size, void *p);
   static void delete_PileUpMerger(void *p);
   static void deleteArray_PileUpMerger(void *p);
   static void destruct_PileUpMerger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::PileUpMerger*)
   {
      ::PileUpMerger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PileUpMerger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PileUpMerger", ::PileUpMerger::Class_Version(), "./modules/PileUpMerger.h", 23,
                  typeid(::PileUpMerger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::PileUpMerger::Dictionary, isa_proxy, 4,
                  sizeof(::PileUpMerger) );
      instance.SetNew(&new_PileUpMerger);
      instance.SetNewArray(&newArray_PileUpMerger);
      instance.SetDelete(&delete_PileUpMerger);
      instance.SetDeleteArray(&deleteArray_PileUpMerger);
      instance.SetDestructor(&destruct_PileUpMerger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::PileUpMerger*)
   {
      return GenerateInitInstanceLocal((::PileUpMerger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PileUpMerger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void JetPileUpSubtractor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_JetPileUpSubtractor(void *p = 0);
   static void *newArray_JetPileUpSubtractor(Long_t size, void *p);
   static void delete_JetPileUpSubtractor(void *p);
   static void deleteArray_JetPileUpSubtractor(void *p);
   static void destruct_JetPileUpSubtractor(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::JetPileUpSubtractor*)
   {
      ::JetPileUpSubtractor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::JetPileUpSubtractor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("JetPileUpSubtractor", ::JetPileUpSubtractor::Class_Version(), "./modules/JetPileUpSubtractor.h", 23,
                  typeid(::JetPileUpSubtractor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::JetPileUpSubtractor::Dictionary, isa_proxy, 4,
                  sizeof(::JetPileUpSubtractor) );
      instance.SetNew(&new_JetPileUpSubtractor);
      instance.SetNewArray(&newArray_JetPileUpSubtractor);
      instance.SetDelete(&delete_JetPileUpSubtractor);
      instance.SetDeleteArray(&deleteArray_JetPileUpSubtractor);
      instance.SetDestructor(&destruct_JetPileUpSubtractor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::JetPileUpSubtractor*)
   {
      return GenerateInitInstanceLocal((::JetPileUpSubtractor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void TrackPileUpSubtractor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackPileUpSubtractor(void *p = 0);
   static void *newArray_TrackPileUpSubtractor(Long_t size, void *p);
   static void delete_TrackPileUpSubtractor(void *p);
   static void deleteArray_TrackPileUpSubtractor(void *p);
   static void destruct_TrackPileUpSubtractor(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackPileUpSubtractor*)
   {
      ::TrackPileUpSubtractor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackPileUpSubtractor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackPileUpSubtractor", ::TrackPileUpSubtractor::Class_Version(), "./modules/TrackPileUpSubtractor.h", 24,
                  typeid(::TrackPileUpSubtractor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::TrackPileUpSubtractor::Dictionary, isa_proxy, 4,
                  sizeof(::TrackPileUpSubtractor) );
      instance.SetNew(&new_TrackPileUpSubtractor);
      instance.SetNewArray(&newArray_TrackPileUpSubtractor);
      instance.SetDelete(&delete_TrackPileUpSubtractor);
      instance.SetDeleteArray(&deleteArray_TrackPileUpSubtractor);
      instance.SetDestructor(&destruct_TrackPileUpSubtractor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::TrackPileUpSubtractor*)
   {
      return GenerateInitInstanceLocal((::TrackPileUpSubtractor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ConstituentFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ConstituentFilter(void *p = 0);
   static void *newArray_ConstituentFilter(Long_t size, void *p);
   static void delete_ConstituentFilter(void *p);
   static void deleteArray_ConstituentFilter(void *p);
   static void destruct_ConstituentFilter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ConstituentFilter*)
   {
      ::ConstituentFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ConstituentFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ConstituentFilter", ::ConstituentFilter::Class_Version(), "./modules/ConstituentFilter.h", 25,
                  typeid(::ConstituentFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ConstituentFilter::Dictionary, isa_proxy, 4,
                  sizeof(::ConstituentFilter) );
      instance.SetNew(&new_ConstituentFilter);
      instance.SetNewArray(&newArray_ConstituentFilter);
      instance.SetDelete(&delete_ConstituentFilter);
      instance.SetDeleteArray(&deleteArray_ConstituentFilter);
      instance.SetDestructor(&destruct_ConstituentFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ConstituentFilter*)
   {
      return GenerateInitInstanceLocal((::ConstituentFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void StatusPidFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_StatusPidFilter(void *p = 0);
   static void *newArray_StatusPidFilter(Long_t size, void *p);
   static void delete_StatusPidFilter(void *p);
   static void deleteArray_StatusPidFilter(void *p);
   static void destruct_StatusPidFilter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::StatusPidFilter*)
   {
      ::StatusPidFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::StatusPidFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("StatusPidFilter", ::StatusPidFilter::Class_Version(), "./modules/StatusPidFilter.h", 25,
                  typeid(::StatusPidFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::StatusPidFilter::Dictionary, isa_proxy, 4,
                  sizeof(::StatusPidFilter) );
      instance.SetNew(&new_StatusPidFilter);
      instance.SetNewArray(&newArray_StatusPidFilter);
      instance.SetDelete(&delete_StatusPidFilter);
      instance.SetDeleteArray(&deleteArray_StatusPidFilter);
      instance.SetDestructor(&destruct_StatusPidFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::StatusPidFilter*)
   {
      return GenerateInitInstanceLocal((::StatusPidFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Cloner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Cloner(void *p = 0);
   static void *newArray_Cloner(Long_t size, void *p);
   static void delete_Cloner(void *p);
   static void deleteArray_Cloner(void *p);
   static void destruct_Cloner(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Cloner*)
   {
      ::Cloner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cloner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cloner", ::Cloner::Class_Version(), "./modules/Cloner.h", 23,
                  typeid(::Cloner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Cloner::Dictionary, isa_proxy, 4,
                  sizeof(::Cloner) );
      instance.SetNew(&new_Cloner);
      instance.SetNewArray(&newArray_Cloner);
      instance.SetDelete(&delete_Cloner);
      instance.SetDeleteArray(&deleteArray_Cloner);
      instance.SetDestructor(&destruct_Cloner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Cloner*)
   {
      return GenerateInitInstanceLocal((::Cloner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cloner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Weighter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Weighter(void *p = 0);
   static void *newArray_Weighter(Long_t size, void *p);
   static void delete_Weighter(void *p);
   static void deleteArray_Weighter(void *p);
   static void destruct_Weighter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Weighter*)
   {
      ::Weighter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Weighter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Weighter", ::Weighter::Class_Version(), "./modules/Weighter.h", 24,
                  typeid(::Weighter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Weighter::Dictionary, isa_proxy, 4,
                  sizeof(::Weighter) );
      instance.SetNew(&new_Weighter);
      instance.SetNewArray(&newArray_Weighter);
      instance.SetDelete(&delete_Weighter);
      instance.SetDeleteArray(&deleteArray_Weighter);
      instance.SetDestructor(&destruct_Weighter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Weighter*)
   {
      return GenerateInitInstanceLocal((::Weighter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Weighter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ExampleModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ExampleModule(void *p = 0);
   static void *newArray_ExampleModule(Long_t size, void *p);
   static void delete_ExampleModule(void *p);
   static void deleteArray_ExampleModule(void *p);
   static void destruct_ExampleModule(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ExampleModule*)
   {
      ::ExampleModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ExampleModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ExampleModule", ::ExampleModule::Class_Version(), "./modules/ExampleModule.h", 24,
                  typeid(::ExampleModule), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ExampleModule::Dictionary, isa_proxy, 4,
                  sizeof(::ExampleModule) );
      instance.SetNew(&new_ExampleModule);
      instance.SetNewArray(&newArray_ExampleModule);
      instance.SetDelete(&delete_ExampleModule);
      instance.SetDeleteArray(&deleteArray_ExampleModule);
      instance.SetDestructor(&destruct_ExampleModule);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ExampleModule*)
   {
      return GenerateInitInstanceLocal((::ExampleModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ExampleModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void PileUpJetID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PileUpJetID(void *p = 0);
   static void *newArray_PileUpJetID(Long_t size, void *p);
   static void delete_PileUpJetID(void *p);
   static void deleteArray_PileUpJetID(void *p);
   static void destruct_PileUpJetID(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::PileUpJetID*)
   {
      ::PileUpJetID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PileUpJetID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PileUpJetID", ::PileUpJetID::Class_Version(), "./modules/PileUpJetID.h", 21,
                  typeid(::PileUpJetID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::PileUpJetID::Dictionary, isa_proxy, 4,
                  sizeof(::PileUpJetID) );
      instance.SetNew(&new_PileUpJetID);
      instance.SetNewArray(&newArray_PileUpJetID);
      instance.SetDelete(&delete_PileUpJetID);
      instance.SetDeleteArray(&deleteArray_PileUpJetID);
      instance.SetDestructor(&destruct_PileUpJetID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::PileUpJetID*)
   {
      return GenerateInitInstanceLocal((::PileUpJetID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PileUpJetID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ModifyBeamSpot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ModifyBeamSpot(void *p = 0);
   static void *newArray_ModifyBeamSpot(Long_t size, void *p);
   static void delete_ModifyBeamSpot(void *p);
   static void deleteArray_ModifyBeamSpot(void *p);
   static void destruct_ModifyBeamSpot(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ModifyBeamSpot*)
   {
      ::ModifyBeamSpot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ModifyBeamSpot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ModifyBeamSpot", ::ModifyBeamSpot::Class_Version(), "./modules/ModifyBeamSpot.h", 17,
                  typeid(::ModifyBeamSpot), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ModifyBeamSpot::Dictionary, isa_proxy, 4,
                  sizeof(::ModifyBeamSpot) );
      instance.SetNew(&new_ModifyBeamSpot);
      instance.SetNewArray(&newArray_ModifyBeamSpot);
      instance.SetDelete(&delete_ModifyBeamSpot);
      instance.SetDeleteArray(&deleteArray_ModifyBeamSpot);
      instance.SetDestructor(&destruct_ModifyBeamSpot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ModifyBeamSpot*)
   {
      return GenerateInitInstanceLocal((::ModifyBeamSpot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ModifyBeamSpot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void GenBeamSpotFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GenBeamSpotFilter(void *p = 0);
   static void *newArray_GenBeamSpotFilter(Long_t size, void *p);
   static void delete_GenBeamSpotFilter(void *p);
   static void deleteArray_GenBeamSpotFilter(void *p);
   static void destruct_GenBeamSpotFilter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::GenBeamSpotFilter*)
   {
      ::GenBeamSpotFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GenBeamSpotFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GenBeamSpotFilter", ::GenBeamSpotFilter::Class_Version(), "./modules/GenBeamSpotFilter.h", 25,
                  typeid(::GenBeamSpotFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::GenBeamSpotFilter::Dictionary, isa_proxy, 4,
                  sizeof(::GenBeamSpotFilter) );
      instance.SetNew(&new_GenBeamSpotFilter);
      instance.SetNewArray(&newArray_GenBeamSpotFilter);
      instance.SetDelete(&delete_GenBeamSpotFilter);
      instance.SetDeleteArray(&deleteArray_GenBeamSpotFilter);
      instance.SetDestructor(&destruct_GenBeamSpotFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::GenBeamSpotFilter*)
   {
      return GenerateInitInstanceLocal((::GenBeamSpotFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GenBeamSpotFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RunPUPPI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RunPUPPI(void *p = 0);
   static void *newArray_RunPUPPI(Long_t size, void *p);
   static void delete_RunPUPPI(void *p);
   static void deleteArray_RunPUPPI(void *p);
   static void destruct_RunPUPPI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RunPUPPI*)
   {
      ::RunPUPPI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RunPUPPI >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RunPUPPI", ::RunPUPPI::Class_Version(), "./modules/RunPUPPI.h", 20,
                  typeid(::RunPUPPI), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RunPUPPI::Dictionary, isa_proxy, 4,
                  sizeof(::RunPUPPI) );
      instance.SetNew(&new_RunPUPPI);
      instance.SetNewArray(&newArray_RunPUPPI);
      instance.SetDelete(&delete_RunPUPPI);
      instance.SetDeleteArray(&deleteArray_RunPUPPI);
      instance.SetDestructor(&destruct_RunPUPPI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RunPUPPI*)
   {
      return GenerateInitInstanceLocal((::RunPUPPI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RunPUPPI*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void NeutrinoFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_NeutrinoFilter(void *p = 0);
   static void *newArray_NeutrinoFilter(Long_t size, void *p);
   static void delete_NeutrinoFilter(void *p);
   static void deleteArray_NeutrinoFilter(void *p);
   static void destruct_NeutrinoFilter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::NeutrinoFilter*)
   {
      ::NeutrinoFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::NeutrinoFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("NeutrinoFilter", ::NeutrinoFilter::Class_Version(), "./modules/NeutrinoFilter.h", 25,
                  typeid(::NeutrinoFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::NeutrinoFilter::Dictionary, isa_proxy, 4,
                  sizeof(::NeutrinoFilter) );
      instance.SetNew(&new_NeutrinoFilter);
      instance.SetNewArray(&newArray_NeutrinoFilter);
      instance.SetDelete(&delete_NeutrinoFilter);
      instance.SetDeleteArray(&deleteArray_NeutrinoFilter);
      instance.SetDestructor(&destruct_NeutrinoFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::NeutrinoFilter*)
   {
      return GenerateInitInstanceLocal((::NeutrinoFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::NeutrinoFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr Delphes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Delphes::Class_Name()
{
   return "Delphes";
}

//______________________________________________________________________________
const char *Delphes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Delphes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Delphes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Delphes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr FastJetFinder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FastJetFinder::Class_Name()
{
   return "FastJetFinder";
}

//______________________________________________________________________________
const char *FastJetFinder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FastJetFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FastJetFinder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::FastJetFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FastJetFinder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FastJetFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FastJetFinder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::FastJetFinder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ParticlePropagator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ParticlePropagator::Class_Name()
{
   return "ParticlePropagator";
}

//______________________________________________________________________________
const char *ParticlePropagator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ParticlePropagator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ParticlePropagator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ParticlePropagator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Efficiency::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Efficiency::Class_Name()
{
   return "Efficiency";
}

//______________________________________________________________________________
const char *Efficiency::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Efficiency::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Efficiency::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Efficiency::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EnergySmearing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EnergySmearing::Class_Name()
{
   return "EnergySmearing";
}

//______________________________________________________________________________
const char *EnergySmearing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EnergySmearing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EnergySmearing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EnergySmearing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MomentumSmearing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MomentumSmearing::Class_Name()
{
   return "MomentumSmearing";
}

//______________________________________________________________________________
const char *MomentumSmearing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MomentumSmearing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MomentumSmearing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MomentumSmearing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Calorimeter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Calorimeter::Class_Name()
{
   return "Calorimeter";
}

//______________________________________________________________________________
const char *Calorimeter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Calorimeter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Calorimeter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Calorimeter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Isolation::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Isolation::Class_Name()
{
   return "Isolation";
}

//______________________________________________________________________________
const char *Isolation::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Isolation::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Isolation::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Isolation::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr IsoTrackFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *IsoTrackFilter::Class_Name()
{
   return "IsoTrackFilter";
}

//______________________________________________________________________________
const char *IsoTrackFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::IsoTrackFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IsoTrackFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::IsoTrackFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IsoTrackFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::IsoTrackFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IsoTrackFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::IsoTrackFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr EnergyScale::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *EnergyScale::Class_Name()
{
   return "EnergyScale";
}

//______________________________________________________________________________
const char *EnergyScale::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EnergyScale::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EnergyScale::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EnergyScale::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr UniqueObjectFinder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *UniqueObjectFinder::Class_Name()
{
   return "UniqueObjectFinder";
}

//______________________________________________________________________________
const char *UniqueObjectFinder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int UniqueObjectFinder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void UniqueObjectFinder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *UniqueObjectFinder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr BTagging::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *BTagging::Class_Name()
{
   return "BTagging";
}

//______________________________________________________________________________
const char *BTagging::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BTagging::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BTagging::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BTagging::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TauTagging::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TauTagging::Class_Name()
{
   return "TauTagging";
}

//______________________________________________________________________________
const char *TauTagging::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TauTagging::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TauTagging::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TauTagging::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TreeWriter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TreeWriter::Class_Name()
{
   return "TreeWriter";
}

//______________________________________________________________________________
const char *TreeWriter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TreeWriter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TreeWriter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TreeWriter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Merger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Merger::Class_Name()
{
   return "Merger";
}

//______________________________________________________________________________
const char *Merger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Merger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Merger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Merger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr LeptonDressing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *LeptonDressing::Class_Name()
{
   return "LeptonDressing";
}

//______________________________________________________________________________
const char *LeptonDressing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LeptonDressing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LeptonDressing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LeptonDressing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr PileUpMerger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *PileUpMerger::Class_Name()
{
   return "PileUpMerger";
}

//______________________________________________________________________________
const char *PileUpMerger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PileUpMerger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PileUpMerger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PileUpMerger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr JetPileUpSubtractor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *JetPileUpSubtractor::Class_Name()
{
   return "JetPileUpSubtractor";
}

//______________________________________________________________________________
const char *JetPileUpSubtractor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int JetPileUpSubtractor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void JetPileUpSubtractor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *JetPileUpSubtractor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr TrackPileUpSubtractor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TrackPileUpSubtractor::Class_Name()
{
   return "TrackPileUpSubtractor";
}

//______________________________________________________________________________
const char *TrackPileUpSubtractor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackPileUpSubtractor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackPileUpSubtractor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackPileUpSubtractor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ConstituentFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ConstituentFilter::Class_Name()
{
   return "ConstituentFilter";
}

//______________________________________________________________________________
const char *ConstituentFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ConstituentFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ConstituentFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ConstituentFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr StatusPidFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *StatusPidFilter::Class_Name()
{
   return "StatusPidFilter";
}

//______________________________________________________________________________
const char *StatusPidFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int StatusPidFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void StatusPidFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *StatusPidFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Cloner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Cloner::Class_Name()
{
   return "Cloner";
}

//______________________________________________________________________________
const char *Cloner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Cloner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Cloner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Cloner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Weighter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Weighter::Class_Name()
{
   return "Weighter";
}

//______________________________________________________________________________
const char *Weighter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Weighter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Weighter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Weighter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ExampleModule::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ExampleModule::Class_Name()
{
   return "ExampleModule";
}

//______________________________________________________________________________
const char *ExampleModule::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ExampleModule::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ExampleModule::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ExampleModule::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr PileUpJetID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *PileUpJetID::Class_Name()
{
   return "PileUpJetID";
}

//______________________________________________________________________________
const char *PileUpJetID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PileUpJetID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PileUpJetID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PileUpJetID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ModifyBeamSpot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ModifyBeamSpot::Class_Name()
{
   return "ModifyBeamSpot";
}

//______________________________________________________________________________
const char *ModifyBeamSpot::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ModifyBeamSpot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ModifyBeamSpot::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ModifyBeamSpot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ModifyBeamSpot::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ModifyBeamSpot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ModifyBeamSpot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ModifyBeamSpot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr GenBeamSpotFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GenBeamSpotFilter::Class_Name()
{
   return "GenBeamSpotFilter";
}

//______________________________________________________________________________
const char *GenBeamSpotFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GenBeamSpotFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GenBeamSpotFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::GenBeamSpotFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GenBeamSpotFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GenBeamSpotFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GenBeamSpotFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::GenBeamSpotFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RunPUPPI::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RunPUPPI::Class_Name()
{
   return "RunPUPPI";
}

//______________________________________________________________________________
const char *RunPUPPI::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RunPUPPI*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RunPUPPI::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RunPUPPI*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RunPUPPI::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RunPUPPI*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RunPUPPI::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RunPUPPI*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr NeutrinoFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *NeutrinoFilter::Class_Name()
{
   return "NeutrinoFilter";
}

//______________________________________________________________________________
const char *NeutrinoFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::NeutrinoFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int NeutrinoFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::NeutrinoFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void NeutrinoFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::NeutrinoFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *NeutrinoFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::NeutrinoFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void Delphes::Streamer(TBuffer &R__b)
{
   // Stream an object of class Delphes.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Delphes::Class(),this);
   } else {
      R__b.WriteClassBuffer(Delphes::Class(),this);
   }
}

//______________________________________________________________________________
void Delphes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Delphes.
      TClass *R__cl = ::Delphes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFactory", &fFactory);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Delphes(void *p) {
      return  p ? new(p) ::Delphes : new ::Delphes;
   }
   static void *newArray_Delphes(Long_t nElements, void *p) {
      return p ? new(p) ::Delphes[nElements] : new ::Delphes[nElements];
   }
   // Wrapper around operator delete
   static void delete_Delphes(void *p) {
      delete ((::Delphes*)p);
   }
   static void deleteArray_Delphes(void *p) {
      delete [] ((::Delphes*)p);
   }
   static void destruct_Delphes(void *p) {
      typedef ::Delphes current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Delphes

//______________________________________________________________________________
void FastJetFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class FastJetFinder.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FastJetFinder::Class(),this);
   } else {
      R__b.WriteClassBuffer(FastJetFinder::Class(),this);
   }
}

//______________________________________________________________________________
void FastJetFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FastJetFinder.
      TClass *R__cl = ::FastJetFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlugin", &fPlugin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDefinition", &fDefinition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKeepPileUp", &fKeepPileUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetAlgorithm", &fJetAlgorithm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameterR", &fParameterR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConeRadius", &fConeRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeedThreshold", &fSeedThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConeAreaFraction", &fConeAreaFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxIterations", &fMaxIterations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxPairSize", &fMaxPairSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIratch", &fIratch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdjacencyCut", &fAdjacencyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOverlapThreshold", &fOverlapThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAreaDefinition", &fAreaDefinition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAreaAlgorithm", &fAreaAlgorithm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fComputeRho", &fComputeRho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGhostEtaMax", &fGhostEtaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRepeat", &fRepeat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGhostArea", &fGhostArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGridScatter", &fGridScatter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPtScatter", &fPtScatter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanGhostPt", &fMeanGhostPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEffectiveRfact", &fEffectiveRfact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaRangeMap", (void*)&fEtaRangeMap);
      R__insp.InspectMember("map<Double_t,Double_t>", (void*)&fEtaRangeMap, "fEtaRangeMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRhoOutputArray", &fRhoOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_FastJetFinder(void *p) {
      return  p ? new(p) ::FastJetFinder : new ::FastJetFinder;
   }
   static void *newArray_FastJetFinder(Long_t nElements, void *p) {
      return p ? new(p) ::FastJetFinder[nElements] : new ::FastJetFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_FastJetFinder(void *p) {
      delete ((::FastJetFinder*)p);
   }
   static void deleteArray_FastJetFinder(void *p) {
      delete [] ((::FastJetFinder*)p);
   }
   static void destruct_FastJetFinder(void *p) {
      typedef ::FastJetFinder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::FastJetFinder

//______________________________________________________________________________
void ParticlePropagator::Streamer(TBuffer &R__b)
{
   // Stream an object of class ParticlePropagator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ParticlePropagator::Class(),this);
   } else {
      R__b.WriteClassBuffer(ParticlePropagator::Class(),this);
   }
}

//______________________________________________________________________________
void ParticlePropagator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ParticlePropagator.
      TClass *R__cl = ::ParticlePropagator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadius", &fRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadius2", &fRadius2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHalfLength", &fHalfLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBz", &fBz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKeepPileUp", &fKeepPileUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargedHadronOutputArray", &fChargedHadronOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fElectronOutputArray", &fElectronOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonOutputArray", &fMuonOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ParticlePropagator(void *p) {
      return  p ? new(p) ::ParticlePropagator : new ::ParticlePropagator;
   }
   static void *newArray_ParticlePropagator(Long_t nElements, void *p) {
      return p ? new(p) ::ParticlePropagator[nElements] : new ::ParticlePropagator[nElements];
   }
   // Wrapper around operator delete
   static void delete_ParticlePropagator(void *p) {
      delete ((::ParticlePropagator*)p);
   }
   static void deleteArray_ParticlePropagator(void *p) {
      delete [] ((::ParticlePropagator*)p);
   }
   static void destruct_ParticlePropagator(void *p) {
      typedef ::ParticlePropagator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ParticlePropagator

//______________________________________________________________________________
void Efficiency::Streamer(TBuffer &R__b)
{
   // Stream an object of class Efficiency.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Efficiency::Class(),this);
   } else {
      R__b.WriteClassBuffer(Efficiency::Class(),this);
   }
}

//______________________________________________________________________________
void Efficiency::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Efficiency.
      TClass *R__cl = ::Efficiency::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Efficiency(void *p) {
      return  p ? new(p) ::Efficiency : new ::Efficiency;
   }
   static void *newArray_Efficiency(Long_t nElements, void *p) {
      return p ? new(p) ::Efficiency[nElements] : new ::Efficiency[nElements];
   }
   // Wrapper around operator delete
   static void delete_Efficiency(void *p) {
      delete ((::Efficiency*)p);
   }
   static void deleteArray_Efficiency(void *p) {
      delete [] ((::Efficiency*)p);
   }
   static void destruct_Efficiency(void *p) {
      typedef ::Efficiency current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Efficiency

//______________________________________________________________________________
void EnergySmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class EnergySmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EnergySmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(EnergySmearing::Class(),this);
   }
}

//______________________________________________________________________________
void EnergySmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EnergySmearing.
      TClass *R__cl = ::EnergySmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EnergySmearing(void *p) {
      return  p ? new(p) ::EnergySmearing : new ::EnergySmearing;
   }
   static void *newArray_EnergySmearing(Long_t nElements, void *p) {
      return p ? new(p) ::EnergySmearing[nElements] : new ::EnergySmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_EnergySmearing(void *p) {
      delete ((::EnergySmearing*)p);
   }
   static void deleteArray_EnergySmearing(void *p) {
      delete [] ((::EnergySmearing*)p);
   }
   static void destruct_EnergySmearing(void *p) {
      typedef ::EnergySmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::EnergySmearing

//______________________________________________________________________________
void MomentumSmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class MomentumSmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MomentumSmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(MomentumSmearing::Class(),this);
   }
}

//______________________________________________________________________________
void MomentumSmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MomentumSmearing.
      TClass *R__cl = ::MomentumSmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MomentumSmearing(void *p) {
      return  p ? new(p) ::MomentumSmearing : new ::MomentumSmearing;
   }
   static void *newArray_MomentumSmearing(Long_t nElements, void *p) {
      return p ? new(p) ::MomentumSmearing[nElements] : new ::MomentumSmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_MomentumSmearing(void *p) {
      delete ((::MomentumSmearing*)p);
   }
   static void deleteArray_MomentumSmearing(void *p) {
      delete [] ((::MomentumSmearing*)p);
   }
   static void destruct_MomentumSmearing(void *p) {
      typedef ::MomentumSmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MomentumSmearing

//______________________________________________________________________________
void Calorimeter::Streamer(TBuffer &R__b)
{
   // Stream an object of class Calorimeter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Calorimeter::Class(),this);
   } else {
      R__b.WriteClassBuffer(Calorimeter::Class(),this);
   }
}

//______________________________________________________________________________
void Calorimeter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Calorimeter.
      TClass *R__cl = ::Calorimeter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTower", &fTower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEta", &fTowerEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerPhi", &fTowerPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEdges[4]", fTowerEdges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerECalEnergy", &fTowerECalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHCalEnergy", &fTowerHCalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackECalEnergy", &fTrackECalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackHCalEnergy", &fTrackHCalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerTrackHits", &fTowerTrackHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerPhotonHits", &fTowerPhotonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimingEMin", &fTimingEMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFractionMap", (void*)&fFractionMap);
      R__insp.InspectMember("Calorimeter::TFractionMap", (void*)&fFractionMap, "fFractionMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinMap", (void*)&fBinMap);
      R__insp.InspectMember("Calorimeter::TBinMap", (void*)&fBinMap, "fBinMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaBins", (void*)&fEtaBins);
      R__insp.InspectMember("vector<Double_t>", (void*)&fEtaBins, "fEtaBins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiBins", (void*)&fPhiBins);
      R__insp.InspectMember("vector<std::vector<Double_t>*>", (void*)&fPhiBins, "fPhiBins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHits", (void*)&fTowerHits);
      R__insp.InspectMember("vector<Long64_t>", (void*)&fTowerHits, "fTowerHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerECalFractions", (void*)&fTowerECalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTowerECalFractions, "fTowerECalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHCalFractions", (void*)&fTowerHCalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTowerHCalFractions, "fTowerHCalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackECalFractions", (void*)&fTrackECalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTrackECalFractions, "fTrackECalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackHCalFractions", (void*)&fTrackHCalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTrackHCalFractions, "fTrackHCalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fECalResolutionFormula", &fECalResolutionFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHCalResolutionFormula", &fHCalResolutionFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItParticleInputArray", &fItParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleInputArray", &fParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTowerOutputArray", &fTowerOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPhotonOutputArray", &fPhotonOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFlowTrackOutputArray", &fEFlowTrackOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFlowTowerOutputArray", &fEFlowTowerOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTowerTrackArray", &fTowerTrackArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTowerTrackArray", &fItTowerTrackArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "electronsFromTrack", &electronsFromTrack);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Calorimeter(void *p) {
      return  p ? new(p) ::Calorimeter : new ::Calorimeter;
   }
   static void *newArray_Calorimeter(Long_t nElements, void *p) {
      return p ? new(p) ::Calorimeter[nElements] : new ::Calorimeter[nElements];
   }
   // Wrapper around operator delete
   static void delete_Calorimeter(void *p) {
      delete ((::Calorimeter*)p);
   }
   static void deleteArray_Calorimeter(void *p) {
      delete [] ((::Calorimeter*)p);
   }
   static void destruct_Calorimeter(void *p) {
      typedef ::Calorimeter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Calorimeter

//______________________________________________________________________________
void Isolation::Streamer(TBuffer &R__b)
{
   // Stream an object of class Isolation.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Isolation::Class(),this);
   } else {
      R__b.WriteClassBuffer(Isolation::Class(),this);
   }
}

//______________________________________________________________________________
void Isolation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Isolation.
      TClass *R__cl = ::Isolation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaRMax", &fDeltaRMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTRatioMax", &fPTRatioMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTSumMax", &fPTSumMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsePTSum", &fUsePTSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNeutralFilter", &fNeutralFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargedFilter", &fChargedFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItNeutralIsolationInputArray", &fItNeutralIsolationInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItChargedIsolationInputArray", &fItChargedIsolationInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItCandidateInputArray", &fItCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItRhoInputArray", &fItRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNeutralIsolationInputArray", &fNeutralIsolationInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargedIsolationInputArray", &fChargedIsolationInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCandidateInputArray", &fCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRhoInputArray", &fRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Isolation(void *p) {
      return  p ? new(p) ::Isolation : new ::Isolation;
   }
   static void *newArray_Isolation(Long_t nElements, void *p) {
      return p ? new(p) ::Isolation[nElements] : new ::Isolation[nElements];
   }
   // Wrapper around operator delete
   static void delete_Isolation(void *p) {
      delete ((::Isolation*)p);
   }
   static void deleteArray_Isolation(void *p) {
      delete [] ((::Isolation*)p);
   }
   static void destruct_Isolation(void *p) {
      typedef ::Isolation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Isolation

//______________________________________________________________________________
void IsoTrackFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class IsoTrackFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(IsoTrackFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(IsoTrackFilter::Class(),this);
   }
}

//______________________________________________________________________________
void IsoTrackFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class IsoTrackFilter.
      TClass *R__cl = ::IsoTrackFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaRMax", &fDeltaRMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTRatioMax", &fPTRatioMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTSumMax", &fPTSumMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsoTrackPTMin", &fIsoTrackPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsePTSum", &fUsePTSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEleFilter", &fEleFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonFilter", &fMuonFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHADFilter", &fHADFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItEleInputArray", &fItEleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItMuonInputArray", &fItMuonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItHADInputArray", &fItHADInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEleInputArray", &fEleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonInputArray", &fMuonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHADInputArray", &fHADInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllInputList", (void*)&fAllInputList);
      R__insp.InspectMember("vector<TIterator*>", (void*)&fAllInputList, "fAllInputList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_IsoTrackFilter(void *p) {
      return  p ? new(p) ::IsoTrackFilter : new ::IsoTrackFilter;
   }
   static void *newArray_IsoTrackFilter(Long_t nElements, void *p) {
      return p ? new(p) ::IsoTrackFilter[nElements] : new ::IsoTrackFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_IsoTrackFilter(void *p) {
      delete ((::IsoTrackFilter*)p);
   }
   static void deleteArray_IsoTrackFilter(void *p) {
      delete [] ((::IsoTrackFilter*)p);
   }
   static void destruct_IsoTrackFilter(void *p) {
      typedef ::IsoTrackFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::IsoTrackFilter

//______________________________________________________________________________
void EnergyScale::Streamer(TBuffer &R__b)
{
   // Stream an object of class EnergyScale.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EnergyScale::Class(),this);
   } else {
      R__b.WriteClassBuffer(EnergyScale::Class(),this);
   }
}

//______________________________________________________________________________
void EnergyScale::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EnergyScale.
      TClass *R__cl = ::EnergyScale::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_EnergyScale(void *p) {
      return  p ? new(p) ::EnergyScale : new ::EnergyScale;
   }
   static void *newArray_EnergyScale(Long_t nElements, void *p) {
      return p ? new(p) ::EnergyScale[nElements] : new ::EnergyScale[nElements];
   }
   // Wrapper around operator delete
   static void delete_EnergyScale(void *p) {
      delete ((::EnergyScale*)p);
   }
   static void deleteArray_EnergyScale(void *p) {
      delete [] ((::EnergyScale*)p);
   }
   static void destruct_EnergyScale(void *p) {
      typedef ::EnergyScale current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::EnergyScale

//______________________________________________________________________________
void UniqueObjectFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class UniqueObjectFinder.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(UniqueObjectFinder::Class(),this);
   } else {
      R__b.WriteClassBuffer(UniqueObjectFinder::Class(),this);
   }
}

//______________________________________________________________________________
void UniqueObjectFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class UniqueObjectFinder.
      TClass *R__cl = ::UniqueObjectFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMap", (void*)&fInputMap);
      R__insp.InspectMember("map<TIterator*,TObjArray*>", (void*)&fInputMap, "fInputMap.", true);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_UniqueObjectFinder(void *p) {
      return  p ? new(p) ::UniqueObjectFinder : new ::UniqueObjectFinder;
   }
   static void *newArray_UniqueObjectFinder(Long_t nElements, void *p) {
      return p ? new(p) ::UniqueObjectFinder[nElements] : new ::UniqueObjectFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_UniqueObjectFinder(void *p) {
      delete ((::UniqueObjectFinder*)p);
   }
   static void deleteArray_UniqueObjectFinder(void *p) {
      delete [] ((::UniqueObjectFinder*)p);
   }
   static void destruct_UniqueObjectFinder(void *p) {
      typedef ::UniqueObjectFinder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::UniqueObjectFinder

//______________________________________________________________________________
void BTagging::Streamer(TBuffer &R__b)
{
   // Stream an object of class BTagging.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(BTagging::Class(),this);
   } else {
      R__b.WriteClassBuffer(BTagging::Class(),this);
   }
}

//______________________________________________________________________________
void BTagging::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BTagging.
      TClass *R__cl = ::BTagging::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBitNumber", &fBitNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEfficiencyMap", (void*)&fEfficiencyMap);
      R__insp.InspectMember("map<Int_t,DelphesFormula*>", (void*)&fEfficiencyMap, "fEfficiencyMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFilter", &fFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItPartonInputArray", &fItPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartonInputArray", &fPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_BTagging(void *p) {
      return  p ? new(p) ::BTagging : new ::BTagging;
   }
   static void *newArray_BTagging(Long_t nElements, void *p) {
      return p ? new(p) ::BTagging[nElements] : new ::BTagging[nElements];
   }
   // Wrapper around operator delete
   static void delete_BTagging(void *p) {
      delete ((::BTagging*)p);
   }
   static void deleteArray_BTagging(void *p) {
      delete [] ((::BTagging*)p);
   }
   static void destruct_BTagging(void *p) {
      typedef ::BTagging current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::BTagging

//______________________________________________________________________________
void TauTagging::Streamer(TBuffer &R__b)
{
   // Stream an object of class TauTagging.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TauTagging::Class(),this);
   } else {
      R__b.WriteClassBuffer(TauTagging::Class(),this);
   }
}

//______________________________________________________________________________
void TauTagging::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TauTagging.
      TClass *R__cl = ::TauTagging::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEfficiencyMap", (void*)&fEfficiencyMap);
      R__insp.InspectMember("map<Int_t,DelphesFormula*>", (void*)&fEfficiencyMap, "fEfficiencyMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFilter", &fFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItPartonInputArray", &fItPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleInputArray", &fParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartonInputArray", &fPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TauTagging(void *p) {
      return  p ? new(p) ::TauTagging : new ::TauTagging;
   }
   static void *newArray_TauTagging(Long_t nElements, void *p) {
      return p ? new(p) ::TauTagging[nElements] : new ::TauTagging[nElements];
   }
   // Wrapper around operator delete
   static void delete_TauTagging(void *p) {
      delete ((::TauTagging*)p);
   }
   static void deleteArray_TauTagging(void *p) {
      delete [] ((::TauTagging*)p);
   }
   static void destruct_TauTagging(void *p) {
      typedef ::TauTagging current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TauTagging

//______________________________________________________________________________
void TreeWriter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TreeWriter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TreeWriter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TreeWriter::Class(),this);
   }
}

//______________________________________________________________________________
void TreeWriter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TreeWriter.
      TClass *R__cl = ::TreeWriter::IsA();
      if (R__cl || R__insp.IsA()) { }
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TreeWriter(void *p) {
      return  p ? new(p) ::TreeWriter : new ::TreeWriter;
   }
   static void *newArray_TreeWriter(Long_t nElements, void *p) {
      return p ? new(p) ::TreeWriter[nElements] : new ::TreeWriter[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeWriter(void *p) {
      delete ((::TreeWriter*)p);
   }
   static void deleteArray_TreeWriter(void *p) {
      delete [] ((::TreeWriter*)p);
   }
   static void destruct_TreeWriter(void *p) {
      typedef ::TreeWriter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TreeWriter

//______________________________________________________________________________
void Merger::Streamer(TBuffer &R__b)
{
   // Stream an object of class Merger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Merger::Class(),this);
   } else {
      R__b.WriteClassBuffer(Merger::Class(),this);
   }
}

//______________________________________________________________________________
void Merger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Merger.
      TClass *R__cl = ::Merger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputList", (void*)&fInputList);
      R__insp.InspectMember("vector<TIterator*>", (void*)&fInputList, "fInputList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMomentumOutputArray", &fMomentumOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEnergyOutputArray", &fEnergyOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Merger(void *p) {
      return  p ? new(p) ::Merger : new ::Merger;
   }
   static void *newArray_Merger(Long_t nElements, void *p) {
      return p ? new(p) ::Merger[nElements] : new ::Merger[nElements];
   }
   // Wrapper around operator delete
   static void delete_Merger(void *p) {
      delete ((::Merger*)p);
   }
   static void deleteArray_Merger(void *p) {
      delete [] ((::Merger*)p);
   }
   static void destruct_Merger(void *p) {
      typedef ::Merger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Merger

//______________________________________________________________________________
void LeptonDressing::Streamer(TBuffer &R__b)
{
   // Stream an object of class LeptonDressing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LeptonDressing::Class(),this);
   } else {
      R__b.WriteClassBuffer(LeptonDressing::Class(),this);
   }
}

//______________________________________________________________________________
void LeptonDressing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LeptonDressing.
      TClass *R__cl = ::LeptonDressing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItDressingInputArray", &fItDressingInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItCandidateInputArray", &fItCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDressingInputArray", &fDressingInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCandidateInputArray", &fCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LeptonDressing(void *p) {
      return  p ? new(p) ::LeptonDressing : new ::LeptonDressing;
   }
   static void *newArray_LeptonDressing(Long_t nElements, void *p) {
      return p ? new(p) ::LeptonDressing[nElements] : new ::LeptonDressing[nElements];
   }
   // Wrapper around operator delete
   static void delete_LeptonDressing(void *p) {
      delete ((::LeptonDressing*)p);
   }
   static void deleteArray_LeptonDressing(void *p) {
      delete [] ((::LeptonDressing*)p);
   }
   static void destruct_LeptonDressing(void *p) {
      typedef ::LeptonDressing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LeptonDressing

//______________________________________________________________________________
void PileUpMerger::Streamer(TBuffer &R__b)
{
   // Stream an object of class PileUpMerger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PileUpMerger::Class(),this);
   } else {
      R__b.WriteClassBuffer(PileUpMerger::Class(),this);
   }
}

//______________________________________________________________________________
void PileUpMerger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PileUpMerger.
      TClass *R__cl = ::PileUpMerger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPileUp", &fMeanPileUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVertexSpread", &fZVertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputBSX", &fInputBSX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputBSY", &fInputBSY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputBSX", &fOutputBSX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputBSY", &fOutputBSY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReader", &fReader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNPUOutputArray", &fNPUOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_PileUpMerger(void *p) {
      return  p ? new(p) ::PileUpMerger : new ::PileUpMerger;
   }
   static void *newArray_PileUpMerger(Long_t nElements, void *p) {
      return p ? new(p) ::PileUpMerger[nElements] : new ::PileUpMerger[nElements];
   }
   // Wrapper around operator delete
   static void delete_PileUpMerger(void *p) {
      delete ((::PileUpMerger*)p);
   }
   static void deleteArray_PileUpMerger(void *p) {
      delete [] ((::PileUpMerger*)p);
   }
   static void destruct_PileUpMerger(void *p) {
      typedef ::PileUpMerger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::PileUpMerger

//______________________________________________________________________________
void JetPileUpSubtractor::Streamer(TBuffer &R__b)
{
   // Stream an object of class JetPileUpSubtractor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(JetPileUpSubtractor::Class(),this);
   } else {
      R__b.WriteClassBuffer(JetPileUpSubtractor::Class(),this);
   }
}

//______________________________________________________________________________
void JetPileUpSubtractor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class JetPileUpSubtractor.
      TClass *R__cl = ::JetPileUpSubtractor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItRhoInputArray", &fItRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRhoInputArray", &fRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_JetPileUpSubtractor(void *p) {
      return  p ? new(p) ::JetPileUpSubtractor : new ::JetPileUpSubtractor;
   }
   static void *newArray_JetPileUpSubtractor(Long_t nElements, void *p) {
      return p ? new(p) ::JetPileUpSubtractor[nElements] : new ::JetPileUpSubtractor[nElements];
   }
   // Wrapper around operator delete
   static void delete_JetPileUpSubtractor(void *p) {
      delete ((::JetPileUpSubtractor*)p);
   }
   static void deleteArray_JetPileUpSubtractor(void *p) {
      delete [] ((::JetPileUpSubtractor*)p);
   }
   static void destruct_JetPileUpSubtractor(void *p) {
      typedef ::JetPileUpSubtractor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::JetPileUpSubtractor

//______________________________________________________________________________
void TrackPileUpSubtractor::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackPileUpSubtractor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackPileUpSubtractor::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackPileUpSubtractor::Class(),this);
   }
}

//______________________________________________________________________________
void TrackPileUpSubtractor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackPileUpSubtractor.
      TClass *R__cl = ::TrackPileUpSubtractor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVertexResolution", &fZVertexResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMap", (void*)&fInputMap);
      R__insp.InspectMember("map<TIterator*,TObjArray*>", (void*)&fInputMap, "fInputMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPVItInputArray", &fPVItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPVInputArray", &fPVInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_TrackPileUpSubtractor(void *p) {
      return  p ? new(p) ::TrackPileUpSubtractor : new ::TrackPileUpSubtractor;
   }
   static void *newArray_TrackPileUpSubtractor(Long_t nElements, void *p) {
      return p ? new(p) ::TrackPileUpSubtractor[nElements] : new ::TrackPileUpSubtractor[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackPileUpSubtractor(void *p) {
      delete ((::TrackPileUpSubtractor*)p);
   }
   static void deleteArray_TrackPileUpSubtractor(void *p) {
      delete [] ((::TrackPileUpSubtractor*)p);
   }
   static void destruct_TrackPileUpSubtractor(void *p) {
      typedef ::TrackPileUpSubtractor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::TrackPileUpSubtractor

//______________________________________________________________________________
void ConstituentFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class ConstituentFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ConstituentFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(ConstituentFilter::Class(),this);
   }
}

//______________________________________________________________________________
void ConstituentFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ConstituentFilter.
      TClass *R__cl = ::ConstituentFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConPTMin", &fConPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConEMin", &fConEMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputList", (void*)&fInputList);
      R__insp.InspectMember("vector<TIterator*>", (void*)&fInputList, "fInputList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMap", (void*)&fInputMap);
      R__insp.InspectMember("map<TIterator*,TObjArray*>", (void*)&fInputMap, "fInputMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ConstituentFilter(void *p) {
      return  p ? new(p) ::ConstituentFilter : new ::ConstituentFilter;
   }
   static void *newArray_ConstituentFilter(Long_t nElements, void *p) {
      return p ? new(p) ::ConstituentFilter[nElements] : new ::ConstituentFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_ConstituentFilter(void *p) {
      delete ((::ConstituentFilter*)p);
   }
   static void deleteArray_ConstituentFilter(void *p) {
      delete [] ((::ConstituentFilter*)p);
   }
   static void destruct_ConstituentFilter(void *p) {
      typedef ::ConstituentFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ConstituentFilter

//______________________________________________________________________________
void StatusPidFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class StatusPidFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(StatusPidFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(StatusPidFilter::Class(),this);
   }
}

//______________________________________________________________________________
void StatusPidFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class StatusPidFilter.
      TClass *R__cl = ::StatusPidFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTMin", &fPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_StatusPidFilter(void *p) {
      return  p ? new(p) ::StatusPidFilter : new ::StatusPidFilter;
   }
   static void *newArray_StatusPidFilter(Long_t nElements, void *p) {
      return p ? new(p) ::StatusPidFilter[nElements] : new ::StatusPidFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_StatusPidFilter(void *p) {
      delete ((::StatusPidFilter*)p);
   }
   static void deleteArray_StatusPidFilter(void *p) {
      delete [] ((::StatusPidFilter*)p);
   }
   static void destruct_StatusPidFilter(void *p) {
      typedef ::StatusPidFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::StatusPidFilter

//______________________________________________________________________________
void Cloner::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cloner.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cloner::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cloner::Class(),this);
   }
}

//______________________________________________________________________________
void Cloner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Cloner.
      TClass *R__cl = ::Cloner::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Cloner(void *p) {
      return  p ? new(p) ::Cloner : new ::Cloner;
   }
   static void *newArray_Cloner(Long_t nElements, void *p) {
      return p ? new(p) ::Cloner[nElements] : new ::Cloner[nElements];
   }
   // Wrapper around operator delete
   static void delete_Cloner(void *p) {
      delete ((::Cloner*)p);
   }
   static void deleteArray_Cloner(void *p) {
      delete [] ((::Cloner*)p);
   }
   static void destruct_Cloner(void *p) {
      typedef ::Cloner current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Cloner

//______________________________________________________________________________
void Weighter::Streamer(TBuffer &R__b)
{
   // Stream an object of class Weighter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Weighter::Class(),this);
   } else {
      R__b.WriteClassBuffer(Weighter::Class(),this);
   }
}

//______________________________________________________________________________
void Weighter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Weighter.
      TClass *R__cl = ::Weighter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeightSet", (void*)&fWeightSet);
      R__insp.InspectMember("set<Int_t>", (void*)&fWeightSet, "fWeightSet.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCodeSet", (void*)&fCodeSet);
      R__insp.InspectMember("set<Int_t>", (void*)&fCodeSet, "fCodeSet.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeightMap", (void*)&fWeightMap);
      R__insp.InspectMember("map<TIndexStruct,Double_t>", (void*)&fWeightMap, "fWeightMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Weighter(void *p) {
      return  p ? new(p) ::Weighter : new ::Weighter;
   }
   static void *newArray_Weighter(Long_t nElements, void *p) {
      return p ? new(p) ::Weighter[nElements] : new ::Weighter[nElements];
   }
   // Wrapper around operator delete
   static void delete_Weighter(void *p) {
      delete ((::Weighter*)p);
   }
   static void deleteArray_Weighter(void *p) {
      delete [] ((::Weighter*)p);
   }
   static void destruct_Weighter(void *p) {
      typedef ::Weighter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Weighter

//______________________________________________________________________________
void ExampleModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class ExampleModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ExampleModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(ExampleModule::Class(),this);
   }
}

//______________________________________________________________________________
void ExampleModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ExampleModule.
      TClass *R__cl = ::ExampleModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntParam", &fIntParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoubleParam", &fDoubleParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrayParam", (void*)&fArrayParam);
      R__insp.InspectMember("deque<Double_t>", (void*)&fArrayParam, "fArrayParam.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ExampleModule(void *p) {
      return  p ? new(p) ::ExampleModule : new ::ExampleModule;
   }
   static void *newArray_ExampleModule(Long_t nElements, void *p) {
      return p ? new(p) ::ExampleModule[nElements] : new ::ExampleModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_ExampleModule(void *p) {
      delete ((::ExampleModule*)p);
   }
   static void deleteArray_ExampleModule(void *p) {
      delete [] ((::ExampleModule*)p);
   }
   static void destruct_ExampleModule(void *p) {
      typedef ::ExampleModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ExampleModule

//______________________________________________________________________________
void PileUpJetID::Streamer(TBuffer &R__b)
{
   // Stream an object of class PileUpJetID.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PileUpJetID::Class(),this);
   } else {
      R__b.WriteClassBuffer(PileUpJetID::Class(),this);
   }
}

//______________________________________________________________________________
void PileUpJetID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PileUpJetID.
      TClass *R__cl = ::PileUpJetID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameterR", &fParameterR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanSqDeltaRMaxBarrel", &fMeanSqDeltaRMaxBarrel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBetaMinBarrel", &fBetaMinBarrel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanSqDeltaRMaxEndcap", &fMeanSqDeltaRMaxEndcap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBetaMinEndcap", &fBetaMinEndcap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanSqDeltaRMaxForward", &fMeanSqDeltaRMaxForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeutralPTMin", &fNeutralPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMinForNeutrals", &fJetPTMinForNeutrals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseConstituents", &fUseConstituents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageEachTower", &fAverageEachTower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNeutralInputArray", &fNeutralInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItNeutralInputArray", &fItNeutralInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNeutralsInPassingJets", &fNeutralsInPassingJets);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_PileUpJetID(void *p) {
      return  p ? new(p) ::PileUpJetID : new ::PileUpJetID;
   }
   static void *newArray_PileUpJetID(Long_t nElements, void *p) {
      return p ? new(p) ::PileUpJetID[nElements] : new ::PileUpJetID[nElements];
   }
   // Wrapper around operator delete
   static void delete_PileUpJetID(void *p) {
      delete ((::PileUpJetID*)p);
   }
   static void deleteArray_PileUpJetID(void *p) {
      delete [] ((::PileUpJetID*)p);
   }
   static void destruct_PileUpJetID(void *p) {
      typedef ::PileUpJetID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::PileUpJetID

//______________________________________________________________________________
void ModifyBeamSpot::Streamer(TBuffer &R__b)
{
   // Stream an object of class ModifyBeamSpot.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ModifyBeamSpot::Class(),this);
   } else {
      R__b.WriteClassBuffer(ModifyBeamSpot::Class(),this);
   }
}

//______________________________________________________________________________
void ModifyBeamSpot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ModifyBeamSpot.
      TClass *R__cl = ::ModifyBeamSpot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVertexSpread", &fZVertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentZ", &currentZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentT", &currentT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentPU", &currentPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPVOutputArray", &fPVOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ModifyBeamSpot(void *p) {
      return  p ? new(p) ::ModifyBeamSpot : new ::ModifyBeamSpot;
   }
   static void *newArray_ModifyBeamSpot(Long_t nElements, void *p) {
      return p ? new(p) ::ModifyBeamSpot[nElements] : new ::ModifyBeamSpot[nElements];
   }
   // Wrapper around operator delete
   static void delete_ModifyBeamSpot(void *p) {
      delete ((::ModifyBeamSpot*)p);
   }
   static void deleteArray_ModifyBeamSpot(void *p) {
      delete [] ((::ModifyBeamSpot*)p);
   }
   static void destruct_ModifyBeamSpot(void *p) {
      typedef ::ModifyBeamSpot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ModifyBeamSpot

//______________________________________________________________________________
void GenBeamSpotFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class GenBeamSpotFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GenBeamSpotFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(GenBeamSpotFilter::Class(),this);
   }
}

//______________________________________________________________________________
void GenBeamSpotFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GenBeamSpotFilter.
      TClass *R__cl = ::GenBeamSpotFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTMin", &fPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPassedOne", &fPassedOne);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_GenBeamSpotFilter(void *p) {
      return  p ? new(p) ::GenBeamSpotFilter : new ::GenBeamSpotFilter;
   }
   static void *newArray_GenBeamSpotFilter(Long_t nElements, void *p) {
      return p ? new(p) ::GenBeamSpotFilter[nElements] : new ::GenBeamSpotFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_GenBeamSpotFilter(void *p) {
      delete ((::GenBeamSpotFilter*)p);
   }
   static void deleteArray_GenBeamSpotFilter(void *p) {
      delete [] ((::GenBeamSpotFilter*)p);
   }
   static void destruct_GenBeamSpotFilter(void *p) {
      typedef ::GenBeamSpotFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::GenBeamSpotFilter

//______________________________________________________________________________
void RunPUPPI::Streamer(TBuffer &R__b)
{
   // Stream an object of class RunPUPPI.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RunPUPPI::Class(),this);
   } else {
      R__b.WriteClassBuffer(RunPUPPI::Class(),this);
   }
}

//______________________________________________________________________________
void RunPUPPI::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RunPUPPI.
      TClass *R__cl = ::RunPUPPI::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackerEta", &fTrackerEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItNeutralInputArray", &fItNeutralInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNeutralInputArray", &fNeutralInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RunPUPPI(void *p) {
      return  p ? new(p) ::RunPUPPI : new ::RunPUPPI;
   }
   static void *newArray_RunPUPPI(Long_t nElements, void *p) {
      return p ? new(p) ::RunPUPPI[nElements] : new ::RunPUPPI[nElements];
   }
   // Wrapper around operator delete
   static void delete_RunPUPPI(void *p) {
      delete ((::RunPUPPI*)p);
   }
   static void deleteArray_RunPUPPI(void *p) {
      delete [] ((::RunPUPPI*)p);
   }
   static void destruct_RunPUPPI(void *p) {
      typedef ::RunPUPPI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RunPUPPI

//______________________________________________________________________________
void NeutrinoFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class NeutrinoFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(NeutrinoFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(NeutrinoFilter::Class(),this);
   }
}

//______________________________________________________________________________
void NeutrinoFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class NeutrinoFilter.
      TClass *R__cl = ::NeutrinoFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTMin", &fPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_NeutrinoFilter(void *p) {
      return  p ? new(p) ::NeutrinoFilter : new ::NeutrinoFilter;
   }
   static void *newArray_NeutrinoFilter(Long_t nElements, void *p) {
      return p ? new(p) ::NeutrinoFilter[nElements] : new ::NeutrinoFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_NeutrinoFilter(void *p) {
      delete ((::NeutrinoFilter*)p);
   }
   static void deleteArray_NeutrinoFilter(void *p) {
      delete [] ((::NeutrinoFilter*)p);
   }
   static void destruct_NeutrinoFilter(void *p) {
      typedef ::NeutrinoFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::NeutrinoFilter

namespace ROOTDict {
   void dequelEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dequelEdoublegR_Dictionary();
   static void *new_dequelEdoublegR(void *p = 0);
   static void *newArray_dequelEdoublegR(Long_t size, void *p);
   static void delete_dequelEdoublegR(void *p);
   static void deleteArray_dequelEdoublegR(void *p);
   static void destruct_dequelEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const deque<double>*)
   {
      deque<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(deque<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("deque<double>", -2, "deque.dll", 0,
                  typeid(deque<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &dequelEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(deque<double>) );
      instance.SetNew(&new_dequelEdoublegR);
      instance.SetNewArray(&newArray_dequelEdoublegR);
      instance.SetDelete(&delete_dequelEdoublegR);
      instance.SetDeleteArray(&deleteArray_dequelEdoublegR);
      instance.SetDestructor(&destruct_dequelEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< deque<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const deque<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dequelEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const deque<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_dequelEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<double> : new deque<double>;
   }
   static void *newArray_dequelEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<double>[nElements] : new deque<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_dequelEdoublegR(void *p) {
      delete ((deque<double>*)p);
   }
   static void deleteArray_dequelEdoublegR(void *p) {
      delete [] ((deque<double>*)p);
   }
   static void destruct_dequelEdoublegR(void *p) {
      typedef deque<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class deque<double>

namespace ROOTDict {
   void maplEWeightercLcLTIndexStructcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEWeightercLcLTIndexStructcOdoublegR_Dictionary();
   static void *new_maplEWeightercLcLTIndexStructcOdoublegR(void *p = 0);
   static void *newArray_maplEWeightercLcLTIndexStructcOdoublegR(Long_t size, void *p);
   static void delete_maplEWeightercLcLTIndexStructcOdoublegR(void *p);
   static void deleteArray_maplEWeightercLcLTIndexStructcOdoublegR(void *p);
   static void destruct_maplEWeightercLcLTIndexStructcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<Weighter::TIndexStruct,double>*)
   {
      map<Weighter::TIndexStruct,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<Weighter::TIndexStruct,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<Weighter::TIndexStruct,double>", -2, "prec_stl/map", 63,
                  typeid(map<Weighter::TIndexStruct,double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEWeightercLcLTIndexStructcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<Weighter::TIndexStruct,double>) );
      instance.SetNew(&new_maplEWeightercLcLTIndexStructcOdoublegR);
      instance.SetNewArray(&newArray_maplEWeightercLcLTIndexStructcOdoublegR);
      instance.SetDelete(&delete_maplEWeightercLcLTIndexStructcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEWeightercLcLTIndexStructcOdoublegR);
      instance.SetDestructor(&destruct_maplEWeightercLcLTIndexStructcOdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<Weighter::TIndexStruct,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<Weighter::TIndexStruct,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEWeightercLcLTIndexStructcOdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<Weighter::TIndexStruct,double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEWeightercLcLTIndexStructcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<Weighter::TIndexStruct,double> : new map<Weighter::TIndexStruct,double>;
   }
   static void *newArray_maplEWeightercLcLTIndexStructcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<Weighter::TIndexStruct,double>[nElements] : new map<Weighter::TIndexStruct,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEWeightercLcLTIndexStructcOdoublegR(void *p) {
      delete ((map<Weighter::TIndexStruct,double>*)p);
   }
   static void deleteArray_maplEWeightercLcLTIndexStructcOdoublegR(void *p) {
      delete [] ((map<Weighter::TIndexStruct,double>*)p);
   }
   static void destruct_maplEWeightercLcLTIndexStructcOdoublegR(void *p) {
      typedef map<Weighter::TIndexStruct,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<Weighter::TIndexStruct,double>

namespace ROOTDict {
   void setlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void setlEintgR_Dictionary();
   static void *new_setlEintgR(void *p = 0);
   static void *newArray_setlEintgR(Long_t size, void *p);
   static void delete_setlEintgR(void *p);
   static void deleteArray_setlEintgR(void *p);
   static void destruct_setlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const set<int>*)
   {
      set<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(set<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("set<int>", -2, "set.dll", 0,
                  typeid(set<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &setlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(set<int>) );
      instance.SetNew(&new_setlEintgR);
      instance.SetNewArray(&newArray_setlEintgR);
      instance.SetDelete(&delete_setlEintgR);
      instance.SetDeleteArray(&deleteArray_setlEintgR);
      instance.SetDestructor(&destruct_setlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Insert< set<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const set<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void setlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const set<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_setlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) set<int> : new set<int>;
   }
   static void *newArray_setlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) set<int>[nElements] : new set<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_setlEintgR(void *p) {
      delete ((set<int>*)p);
   }
   static void deleteArray_setlEintgR(void *p) {
      delete [] ((set<int>*)p);
   }
   static void destruct_setlEintgR(void *p) {
      typedef set<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class set<int>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlELong64_tgR_Dictionary();
   static void *new_vectorlELong64_tgR(void *p = 0);
   static void *newArray_vectorlELong64_tgR(Long_t size, void *p);
   static void delete_vectorlELong64_tgR(void *p);
   static void deleteArray_vectorlELong64_tgR(void *p);
   static void destruct_vectorlELong64_tgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<Long64_t>*)
   {
      vector<Long64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Long64_t>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Long64_t>", -2, "vector.dll", 0,
                  typeid(vector<Long64_t>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlELong64_tgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Long64_t>) );
      instance.SetNew(&new_vectorlELong64_tgR);
      instance.SetNewArray(&newArray_vectorlELong64_tgR);
      instance.SetDelete(&delete_vectorlELong64_tgR);
      instance.SetDeleteArray(&deleteArray_vectorlELong64_tgR);
      instance.SetDestructor(&destruct_vectorlELong64_tgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<Long64_t> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Long64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlELong64_tgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<Long64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlELong64_tgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Long64_t> : new vector<Long64_t>;
   }
   static void *newArray_vectorlELong64_tgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Long64_t>[nElements] : new vector<Long64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlELong64_tgR(void *p) {
      delete ((vector<Long64_t>*)p);
   }
   static void deleteArray_vectorlELong64_tgR(void *p) {
      delete [] ((vector<Long64_t>*)p);
   }
   static void destruct_vectorlELong64_tgR(void *p) {
      typedef vector<Long64_t> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<Long64_t>

namespace ROOTDict {
   void vectorlEvectorlEdoublegRmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRmUgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRmUgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRmUgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRmUgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRmUgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double>*>*)
   {
      vector<vector<double>*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double>*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double>*>", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<double>*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double>*>) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRmUgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRmUgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRmUgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<vector<double>*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double>*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<vector<double>*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double>*> : new vector<vector<double>*>;
   }
   static void *newArray_vectorlEvectorlEdoublegRmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double>*>[nElements] : new vector<vector<double>*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRmUgR(void *p) {
      delete ((vector<vector<double>*>*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRmUgR(void *p) {
      delete [] ((vector<vector<double>*>*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRmUgR(void *p) {
      typedef vector<vector<double>*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<vector<double>*>

/********************************************************
* tmp/modules/ModulesDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableModulesDict();

extern "C" void G__set_cpp_environmentModulesDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__cpp_reset_tagtableModulesDict();
}
#include <new>
extern "C" int G__cpp_dllrevModulesDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Delphes */
static int G__ModulesDict_448_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Delphes* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Delphes((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Delphes((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Delphes[n];
       } else {
         p = new((void*) gvp) Delphes[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Delphes;
       } else {
         p = new((void*) gvp) Delphes;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Delphes*) G__getstructoffset())->SetTreeWriter((ExRootTreeWriter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Delphes*) G__getstructoffset())->GetFactory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Delphes*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Delphes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Delphes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Delphes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Delphes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Delphes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Delphes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Delphes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Delphes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_448_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Delphes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_448_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Delphes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Delphes(*(Delphes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Delphes G__TDelphes;
static int G__ModulesDict_448_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Delphes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Delphes*) (soff+(sizeof(Delphes)*i)))->~G__TDelphes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Delphes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Delphes*) (soff))->~G__TDelphes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_448_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Delphes* dest = (Delphes*) G__getstructoffset();
   *dest = *(Delphes*) libp->para[0].ref;
   const Delphes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FastJetFinder */
static int G__ModulesDict_453_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FastJetFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FastJetFinder[n];
     } else {
       p = new((void*) gvp) FastJetFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FastJetFinder;
     } else {
       p = new((void*) gvp) FastJetFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FastJetFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FastJetFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FastJetFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FastJetFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FastJetFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FastJetFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FastJetFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FastJetFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_453_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FastJetFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_453_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FastJetFinder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FastJetFinder(*(FastJetFinder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FastJetFinder G__TFastJetFinder;
static int G__ModulesDict_453_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FastJetFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FastJetFinder*) (soff+(sizeof(FastJetFinder)*i)))->~G__TFastJetFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FastJetFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FastJetFinder*) (soff))->~G__TFastJetFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ParticlePropagator */
static int G__ModulesDict_454_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ParticlePropagator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticlePropagator[n];
     } else {
       p = new((void*) gvp) ParticlePropagator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticlePropagator;
     } else {
       p = new((void*) gvp) ParticlePropagator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ParticlePropagator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticlePropagator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ParticlePropagator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ParticlePropagator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ParticlePropagator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticlePropagator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ParticlePropagator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticlePropagator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_454_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ParticlePropagator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_454_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ParticlePropagator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ParticlePropagator(*(ParticlePropagator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ParticlePropagator G__TParticlePropagator;
static int G__ModulesDict_454_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ParticlePropagator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ParticlePropagator*) (soff+(sizeof(ParticlePropagator)*i)))->~G__TParticlePropagator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ParticlePropagator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ParticlePropagator*) (soff))->~G__TParticlePropagator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Efficiency */
static int G__ModulesDict_456_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Efficiency* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Efficiency[n];
     } else {
       p = new((void*) gvp) Efficiency[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Efficiency;
     } else {
       p = new((void*) gvp) Efficiency;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Efficiency::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Efficiency::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Efficiency::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Efficiency::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Efficiency*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Efficiency::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Efficiency::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Efficiency::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Efficiency::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_456_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Efficiency* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Efficiency(*(Efficiency*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Efficiency G__TEfficiency;
static int G__ModulesDict_456_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Efficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Efficiency*) (soff+(sizeof(Efficiency)*i)))->~G__TEfficiency();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Efficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Efficiency*) (soff))->~G__TEfficiency();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EnergySmearing */
static int G__ModulesDict_457_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EnergySmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergySmearing[n];
     } else {
       p = new((void*) gvp) EnergySmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergySmearing;
     } else {
       p = new((void*) gvp) EnergySmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EnergySmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergySmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EnergySmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EnergySmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EnergySmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergySmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergySmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergySmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergySmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_457_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EnergySmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EnergySmearing(*(EnergySmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EnergySmearing G__TEnergySmearing;
static int G__ModulesDict_457_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EnergySmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EnergySmearing*) (soff+(sizeof(EnergySmearing)*i)))->~G__TEnergySmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EnergySmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EnergySmearing*) (soff))->~G__TEnergySmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MomentumSmearing */
static int G__ModulesDict_458_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MomentumSmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MomentumSmearing[n];
     } else {
       p = new((void*) gvp) MomentumSmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MomentumSmearing;
     } else {
       p = new((void*) gvp) MomentumSmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MomentumSmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MomentumSmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MomentumSmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MomentumSmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MomentumSmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MomentumSmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MomentumSmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MomentumSmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MomentumSmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_458_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MomentumSmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MomentumSmearing(*(MomentumSmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MomentumSmearing G__TMomentumSmearing;
static int G__ModulesDict_458_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MomentumSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MomentumSmearing*) (soff+(sizeof(MomentumSmearing)*i)))->~G__TMomentumSmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MomentumSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MomentumSmearing*) (soff))->~G__TMomentumSmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Calorimeter */
static int G__ModulesDict_515_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Calorimeter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Calorimeter[n];
     } else {
       p = new((void*) gvp) Calorimeter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Calorimeter;
     } else {
       p = new((void*) gvp) Calorimeter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Calorimeter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Calorimeter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Calorimeter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Calorimeter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Calorimeter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Calorimeter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Calorimeter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Calorimeter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Calorimeter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_515_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Calorimeter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Calorimeter(*(Calorimeter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Calorimeter G__TCalorimeter;
static int G__ModulesDict_515_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Calorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Calorimeter*) (soff+(sizeof(Calorimeter)*i)))->~G__TCalorimeter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Calorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Calorimeter*) (soff))->~G__TCalorimeter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Isolation */
static int G__ModulesDict_538_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isolation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isolation[n];
     } else {
       p = new((void*) gvp) Isolation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isolation;
     } else {
       p = new((void*) gvp) Isolation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Isolation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isolation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Isolation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Isolation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isolation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isolation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isolation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isolation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_538_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isolation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_538_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Isolation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Isolation(*(Isolation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Isolation G__TIsolation;
static int G__ModulesDict_538_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Isolation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Isolation*) (soff+(sizeof(Isolation)*i)))->~G__TIsolation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Isolation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Isolation*) (soff))->~G__TIsolation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* IsoTrackFilter */
static int G__ModulesDict_540_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IsoTrackFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IsoTrackFilter[n];
     } else {
       p = new((void*) gvp) IsoTrackFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IsoTrackFilter;
     } else {
       p = new((void*) gvp) IsoTrackFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IsoTrackFilter*) G__getstructoffset())->IsoTrackSelector(*(vector<TIterator*>*) libp->para[0].ref, (ExRootFilter*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) IsoTrackFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IsoTrackFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) IsoTrackFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      IsoTrackFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IsoTrackFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IsoTrackFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IsoTrackFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IsoTrackFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_540_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IsoTrackFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_540_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   IsoTrackFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new IsoTrackFilter(*(IsoTrackFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef IsoTrackFilter G__TIsoTrackFilter;
static int G__ModulesDict_540_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (IsoTrackFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((IsoTrackFilter*) (soff+(sizeof(IsoTrackFilter)*i)))->~G__TIsoTrackFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (IsoTrackFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((IsoTrackFilter*) (soff))->~G__TIsoTrackFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EnergyScale */
static int G__ModulesDict_545_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EnergyScale* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergyScale[n];
     } else {
       p = new((void*) gvp) EnergyScale[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergyScale;
     } else {
       p = new((void*) gvp) EnergyScale;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EnergyScale::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergyScale::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EnergyScale::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EnergyScale::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EnergyScale*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergyScale::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergyScale::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergyScale::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_545_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergyScale::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_545_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EnergyScale* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EnergyScale(*(EnergyScale*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EnergyScale G__TEnergyScale;
static int G__ModulesDict_545_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EnergyScale*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EnergyScale*) (soff+(sizeof(EnergyScale)*i)))->~G__TEnergyScale();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EnergyScale*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EnergyScale*) (soff))->~G__TEnergyScale();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* UniqueObjectFinder */
static int G__ModulesDict_546_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UniqueObjectFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UniqueObjectFinder[n];
     } else {
       p = new((void*) gvp) UniqueObjectFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UniqueObjectFinder;
     } else {
       p = new((void*) gvp) UniqueObjectFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) UniqueObjectFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UniqueObjectFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) UniqueObjectFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      UniqueObjectFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UniqueObjectFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UniqueObjectFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UniqueObjectFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UniqueObjectFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UniqueObjectFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   UniqueObjectFinder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new UniqueObjectFinder(*(UniqueObjectFinder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef UniqueObjectFinder G__TUniqueObjectFinder;
static int G__ModulesDict_546_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (UniqueObjectFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((UniqueObjectFinder*) (soff+(sizeof(UniqueObjectFinder)*i)))->~G__TUniqueObjectFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (UniqueObjectFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((UniqueObjectFinder*) (soff))->~G__TUniqueObjectFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_546_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UniqueObjectFinder* dest = (UniqueObjectFinder*) G__getstructoffset();
   *dest = *(UniqueObjectFinder*) libp->para[0].ref;
   const UniqueObjectFinder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BTagging */
static int G__ModulesDict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BTagging* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BTagging[n];
     } else {
       p = new((void*) gvp) BTagging[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BTagging;
     } else {
       p = new((void*) gvp) BTagging;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BTagging::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BTagging::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BTagging::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BTagging::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BTagging*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BTagging::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BTagging::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BTagging::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BTagging::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BTagging* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BTagging(*(BTagging*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BTagging G__TBTagging;
static int G__ModulesDict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BTagging*) (soff+(sizeof(BTagging)*i)))->~G__TBTagging();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BTagging*) (soff))->~G__TBTagging();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TauTagging */
static int G__ModulesDict_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TauTagging* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauTagging[n];
     } else {
       p = new((void*) gvp) TauTagging[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauTagging;
     } else {
       p = new((void*) gvp) TauTagging;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TauTagging::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauTagging::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TauTagging::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TauTagging::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TauTagging*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauTagging::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TauTagging::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauTagging::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TauTagging::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_566_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TauTagging* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TauTagging(*(TauTagging*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TauTagging G__TTauTagging;
static int G__ModulesDict_566_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TauTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TauTagging*) (soff+(sizeof(TauTagging)*i)))->~G__TTauTagging();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TauTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TauTagging*) (soff))->~G__TTauTagging();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeWriter */
static int G__ModulesDict_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeWriter[n];
     } else {
       p = new((void*) gvp) TreeWriter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeWriter;
     } else {
       p = new((void*) gvp) TreeWriter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TreeWriter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeWriter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TreeWriter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TreeWriter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeWriter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeWriter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeWriter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeWriter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_568_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeWriter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_568_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeWriter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeWriter(*(TreeWriter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeWriter G__TTreeWriter;
static int G__ModulesDict_568_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeWriter*) (soff+(sizeof(TreeWriter)*i)))->~G__TTreeWriter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeWriter*) (soff))->~G__TTreeWriter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_568_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeWriter* dest = (TreeWriter*) G__getstructoffset();
   *dest = *(TreeWriter*) libp->para[0].ref;
   const TreeWriter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Merger */
static int G__ModulesDict_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Merger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Merger[n];
     } else {
       p = new((void*) gvp) Merger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Merger;
     } else {
       p = new((void*) gvp) Merger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Merger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Merger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Merger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Merger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Merger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Merger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Merger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Merger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Merger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Merger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Merger(*(Merger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Merger G__TMerger;
static int G__ModulesDict_569_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Merger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Merger*) (soff+(sizeof(Merger)*i)))->~G__TMerger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Merger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Merger*) (soff))->~G__TMerger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_569_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Merger* dest = (Merger*) G__getstructoffset();
   *dest = *(Merger*) libp->para[0].ref;
   const Merger& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LeptonDressing */
static int G__ModulesDict_570_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LeptonDressing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LeptonDressing[n];
     } else {
       p = new((void*) gvp) LeptonDressing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LeptonDressing;
     } else {
       p = new((void*) gvp) LeptonDressing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LeptonDressing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LeptonDressing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LeptonDressing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LeptonDressing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LeptonDressing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LeptonDressing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LeptonDressing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LeptonDressing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LeptonDressing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LeptonDressing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LeptonDressing(*(LeptonDressing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LeptonDressing G__TLeptonDressing;
static int G__ModulesDict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LeptonDressing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LeptonDressing*) (soff+(sizeof(LeptonDressing)*i)))->~G__TLeptonDressing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LeptonDressing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LeptonDressing*) (soff))->~G__TLeptonDressing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PileUpMerger */
static int G__ModulesDict_572_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PileUpMerger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpMerger[n];
     } else {
       p = new((void*) gvp) PileUpMerger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpMerger;
     } else {
       p = new((void*) gvp) PileUpMerger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PileUpMerger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpMerger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PileUpMerger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PileUpMerger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PileUpMerger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpMerger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpMerger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpMerger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_572_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpMerger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_572_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PileUpMerger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PileUpMerger(*(PileUpMerger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PileUpMerger G__TPileUpMerger;
static int G__ModulesDict_572_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PileUpMerger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PileUpMerger*) (soff+(sizeof(PileUpMerger)*i)))->~G__TPileUpMerger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PileUpMerger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PileUpMerger*) (soff))->~G__TPileUpMerger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JetPileUpSubtractor */
static int G__ModulesDict_591_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetPileUpSubtractor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetPileUpSubtractor[n];
     } else {
       p = new((void*) gvp) JetPileUpSubtractor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetPileUpSubtractor;
     } else {
       p = new((void*) gvp) JetPileUpSubtractor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) JetPileUpSubtractor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetPileUpSubtractor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) JetPileUpSubtractor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      JetPileUpSubtractor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetPileUpSubtractor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetPileUpSubtractor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JetPileUpSubtractor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetPileUpSubtractor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_591_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JetPileUpSubtractor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_591_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   JetPileUpSubtractor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new JetPileUpSubtractor(*(JetPileUpSubtractor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JetPileUpSubtractor G__TJetPileUpSubtractor;
static int G__ModulesDict_591_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JetPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JetPileUpSubtractor*) (soff+(sizeof(JetPileUpSubtractor)*i)))->~G__TJetPileUpSubtractor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JetPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JetPileUpSubtractor*) (soff))->~G__TJetPileUpSubtractor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackPileUpSubtractor */
static int G__ModulesDict_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackPileUpSubtractor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackPileUpSubtractor[n];
     } else {
       p = new((void*) gvp) TrackPileUpSubtractor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackPileUpSubtractor;
     } else {
       p = new((void*) gvp) TrackPileUpSubtractor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackPileUpSubtractor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPileUpSubtractor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackPileUpSubtractor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackPileUpSubtractor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackPileUpSubtractor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPileUpSubtractor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackPileUpSubtractor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPileUpSubtractor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackPileUpSubtractor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_592_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackPileUpSubtractor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackPileUpSubtractor(*(TrackPileUpSubtractor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackPileUpSubtractor G__TTrackPileUpSubtractor;
static int G__ModulesDict_592_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackPileUpSubtractor*) (soff+(sizeof(TrackPileUpSubtractor)*i)))->~G__TTrackPileUpSubtractor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackPileUpSubtractor*) (soff))->~G__TTrackPileUpSubtractor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ConstituentFilter */
static int G__ModulesDict_593_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ConstituentFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ConstituentFilter[n];
     } else {
       p = new((void*) gvp) ConstituentFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ConstituentFilter;
     } else {
       p = new((void*) gvp) ConstituentFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ConstituentFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ConstituentFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ConstituentFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ConstituentFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ConstituentFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ConstituentFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ConstituentFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ConstituentFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ConstituentFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_593_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ConstituentFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ConstituentFilter(*(ConstituentFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ConstituentFilter G__TConstituentFilter;
static int G__ModulesDict_593_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ConstituentFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ConstituentFilter*) (soff+(sizeof(ConstituentFilter)*i)))->~G__TConstituentFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ConstituentFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ConstituentFilter*) (soff))->~G__TConstituentFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_593_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ConstituentFilter* dest = (ConstituentFilter*) G__getstructoffset();
   *dest = *(ConstituentFilter*) libp->para[0].ref;
   const ConstituentFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* StatusPidFilter */
static int G__ModulesDict_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   StatusPidFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StatusPidFilter[n];
     } else {
       p = new((void*) gvp) StatusPidFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StatusPidFilter;
     } else {
       p = new((void*) gvp) StatusPidFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) StatusPidFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StatusPidFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) StatusPidFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      StatusPidFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((StatusPidFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StatusPidFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) StatusPidFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StatusPidFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) StatusPidFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   StatusPidFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new StatusPidFilter(*(StatusPidFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef StatusPidFilter G__TStatusPidFilter;
static int G__ModulesDict_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (StatusPidFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((StatusPidFilter*) (soff+(sizeof(StatusPidFilter)*i)))->~G__TStatusPidFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (StatusPidFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((StatusPidFilter*) (soff))->~G__TStatusPidFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cloner */
static int G__ModulesDict_595_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cloner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cloner[n];
     } else {
       p = new((void*) gvp) Cloner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cloner;
     } else {
       p = new((void*) gvp) Cloner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cloner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cloner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cloner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cloner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cloner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cloner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cloner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cloner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cloner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_595_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Cloner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Cloner(*(Cloner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cloner G__TCloner;
static int G__ModulesDict_595_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cloner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cloner*) (soff+(sizeof(Cloner)*i)))->~G__TCloner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cloner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cloner*) (soff))->~G__TCloner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Weighter */
static int G__ModulesDict_596_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Weighter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Weighter[n];
     } else {
       p = new((void*) gvp) Weighter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Weighter;
     } else {
       p = new((void*) gvp) Weighter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Weighter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weighter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Weighter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Weighter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Weighter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weighter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Weighter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weighter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Weighter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_596_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Weighter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Weighter(*(Weighter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Weighter G__TWeighter;
static int G__ModulesDict_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Weighter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Weighter*) (soff+(sizeof(Weighter)*i)))->~G__TWeighter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Weighter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Weighter*) (soff))->~G__TWeighter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ExampleModule */
static int G__ModulesDict_607_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ExampleModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExampleModule[n];
     } else {
       p = new((void*) gvp) ExampleModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExampleModule;
     } else {
       p = new((void*) gvp) ExampleModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ExampleModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExampleModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ExampleModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ExampleModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ExampleModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExampleModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ExampleModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExampleModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_607_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ExampleModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_607_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ExampleModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ExampleModule(*(ExampleModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ExampleModule G__TExampleModule;
static int G__ModulesDict_607_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ExampleModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ExampleModule*) (soff+(sizeof(ExampleModule)*i)))->~G__TExampleModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ExampleModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ExampleModule*) (soff))->~G__TExampleModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PileUpJetID */
static int G__ModulesDict_608_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PileUpJetID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpJetID[n];
     } else {
       p = new((void*) gvp) PileUpJetID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpJetID;
     } else {
       p = new((void*) gvp) PileUpJetID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PileUpJetID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpJetID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PileUpJetID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PileUpJetID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PileUpJetID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpJetID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpJetID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpJetID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_608_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpJetID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_608_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PileUpJetID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PileUpJetID(*(PileUpJetID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PileUpJetID G__TPileUpJetID;
static int G__ModulesDict_608_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PileUpJetID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PileUpJetID*) (soff+(sizeof(PileUpJetID)*i)))->~G__TPileUpJetID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PileUpJetID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PileUpJetID*) (soff))->~G__TPileUpJetID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ModifyBeamSpot */
static int G__ModulesDict_609_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ModifyBeamSpot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ModifyBeamSpot[n];
     } else {
       p = new((void*) gvp) ModifyBeamSpot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ModifyBeamSpot;
     } else {
       p = new((void*) gvp) ModifyBeamSpot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ModifyBeamSpot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ModifyBeamSpot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ModifyBeamSpot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ModifyBeamSpot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ModifyBeamSpot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ModifyBeamSpot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ModifyBeamSpot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ModifyBeamSpot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_609_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ModifyBeamSpot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_609_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ModifyBeamSpot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ModifyBeamSpot(*(ModifyBeamSpot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ModifyBeamSpot G__TModifyBeamSpot;
static int G__ModulesDict_609_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ModifyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ModifyBeamSpot*) (soff+(sizeof(ModifyBeamSpot)*i)))->~G__TModifyBeamSpot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ModifyBeamSpot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ModifyBeamSpot*) (soff))->~G__TModifyBeamSpot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GenBeamSpotFilter */
static int G__ModulesDict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GenBeamSpotFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GenBeamSpotFilter[n];
     } else {
       p = new((void*) gvp) GenBeamSpotFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GenBeamSpotFilter;
     } else {
       p = new((void*) gvp) GenBeamSpotFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GenBeamSpotFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenBeamSpotFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GenBeamSpotFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GenBeamSpotFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GenBeamSpotFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenBeamSpotFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GenBeamSpotFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenBeamSpotFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_610_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GenBeamSpotFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GenBeamSpotFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GenBeamSpotFilter(*(GenBeamSpotFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GenBeamSpotFilter G__TGenBeamSpotFilter;
static int G__ModulesDict_610_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GenBeamSpotFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GenBeamSpotFilter*) (soff+(sizeof(GenBeamSpotFilter)*i)))->~G__TGenBeamSpotFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GenBeamSpotFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GenBeamSpotFilter*) (soff))->~G__TGenBeamSpotFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RunPUPPI */
static int G__ModulesDict_611_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunPUPPI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunPUPPI[n];
     } else {
       p = new((void*) gvp) RunPUPPI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunPUPPI;
     } else {
       p = new((void*) gvp) RunPUPPI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RunPUPPI::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunPUPPI::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RunPUPPI::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RunPUPPI::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunPUPPI*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunPUPPI::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RunPUPPI::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunPUPPI::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_611_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RunPUPPI::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_611_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RunPUPPI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RunPUPPI(*(RunPUPPI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RunPUPPI G__TRunPUPPI;
static int G__ModulesDict_611_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RunPUPPI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RunPUPPI*) (soff+(sizeof(RunPUPPI)*i)))->~G__TRunPUPPI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RunPUPPI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RunPUPPI*) (soff))->~G__TRunPUPPI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* NeutrinoFilter */
static int G__ModulesDict_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   NeutrinoFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NeutrinoFilter[n];
     } else {
       p = new((void*) gvp) NeutrinoFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new NeutrinoFilter;
     } else {
       p = new((void*) gvp) NeutrinoFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) NeutrinoFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NeutrinoFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) NeutrinoFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      NeutrinoFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((NeutrinoFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NeutrinoFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NeutrinoFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) NeutrinoFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_612_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) NeutrinoFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_612_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   NeutrinoFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new NeutrinoFilter(*(NeutrinoFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef NeutrinoFilter G__TNeutrinoFilter;
static int G__ModulesDict_612_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (NeutrinoFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((NeutrinoFilter*) (soff+(sizeof(NeutrinoFilter)*i)))->~G__TNeutrinoFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (NeutrinoFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((NeutrinoFilter*) (soff))->~G__TNeutrinoFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Delphes */

/* FastJetFinder */

/* ParticlePropagator */

/* Efficiency */

/* EnergySmearing */

/* MomentumSmearing */

/* Calorimeter */

/* Isolation */

/* IsoTrackFilter */

/* EnergyScale */

/* UniqueObjectFinder */

/* BTagging */

/* TauTagging */

/* TreeWriter */

/* Merger */

/* LeptonDressing */

/* PileUpMerger */

/* JetPileUpSubtractor */

/* TrackPileUpSubtractor */

/* ConstituentFilter */

/* StatusPidFilter */

/* Cloner */

/* Weighter */

/* ExampleModule */

/* PileUpJetID */

/* ModifyBeamSpot */

/* GenBeamSpotFilter */

/* RunPUPPI */

/* NeutrinoFilter */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncModulesDict {
 public:
  G__Sizep2memfuncModulesDict(): p(&G__Sizep2memfuncModulesDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncModulesDict::*p)();
};

size_t G__get_sizep2memfuncModulesDict()
{
  G__Sizep2memfuncModulesDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceModulesDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Delphes))) {
     Delphes *G__Lderived;
     G__Lderived=(Delphes*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder))) {
     FastJetFinder *G__Lderived;
     G__Lderived=(FastJetFinder*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator))) {
     ParticlePropagator *G__Lderived;
     G__Lderived=(ParticlePropagator*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency))) {
     Efficiency *G__Lderived;
     G__Lderived=(Efficiency*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing))) {
     EnergySmearing *G__Lderived;
     G__Lderived=(EnergySmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing))) {
     MomentumSmearing *G__Lderived;
     G__Lderived=(MomentumSmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter))) {
     Calorimeter *G__Lderived;
     G__Lderived=(Calorimeter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Isolation))) {
     Isolation *G__Lderived;
     G__Lderived=(Isolation*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter))) {
     IsoTrackFilter *G__Lderived;
     G__Lderived=(IsoTrackFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale))) {
     EnergyScale *G__Lderived;
     G__Lderived=(EnergyScale*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder))) {
     UniqueObjectFinder *G__Lderived;
     G__Lderived=(UniqueObjectFinder*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_BTagging))) {
     BTagging *G__Lderived;
     G__Lderived=(BTagging*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging))) {
     TauTagging *G__Lderived;
     G__Lderived=(TauTagging*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter))) {
     TreeWriter *G__Lderived;
     G__Lderived=(TreeWriter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Merger))) {
     Merger *G__Lderived;
     G__Lderived=(Merger*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing))) {
     LeptonDressing *G__Lderived;
     G__Lderived=(LeptonDressing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger))) {
     PileUpMerger *G__Lderived;
     G__Lderived=(PileUpMerger*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor))) {
     JetPileUpSubtractor *G__Lderived;
     G__Lderived=(JetPileUpSubtractor*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor))) {
     TrackPileUpSubtractor *G__Lderived;
     G__Lderived=(TrackPileUpSubtractor*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter))) {
     ConstituentFilter *G__Lderived;
     G__Lderived=(ConstituentFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter))) {
     StatusPidFilter *G__Lderived;
     G__Lderived=(StatusPidFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Cloner))) {
     Cloner *G__Lderived;
     G__Lderived=(Cloner*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Weighter))) {
     Weighter *G__Lderived;
     G__Lderived=(Weighter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule))) {
     ExampleModule *G__Lderived;
     G__Lderived=(ExampleModule*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID))) {
     PileUpJetID *G__Lderived;
     G__Lderived=(PileUpJetID*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot))) {
     ModifyBeamSpot *G__Lderived;
     G__Lderived=(ModifyBeamSpot*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter))) {
     GenBeamSpotFilter *G__Lderived;
     G__Lderived=(GenBeamSpotFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI))) {
     RunPUPPI *G__Lderived;
     G__Lderived=(RunPUPPI*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter))) {
     NeutrinoFilter *G__Lderived;
     G__Lderived=(NeutrinoFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableModulesDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString,less<TString> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Double_t,Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_pairlEdoublecOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long64_t,std::pair<Double_t,Double_t> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long long,pair<double,double> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long long,pair<double,double>,less<long long> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TFractionMap",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   G__setnewtype(-1,"!",0);
   G__search_typename2("set<Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Double_t,std::set<Double_t> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,set<double,less<double>,allocator<double> > >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,set<double,less<double>,allocator<double> >,less<double> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TBinMap",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   G__setnewtype(-1,"!",0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Double_t>*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Double_t>*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> >*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Long64_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TIterator*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TIterator*,TObjArray*>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TIterator*,TObjArray*,less<TIterator*> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,DelphesFormula*>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,DelphesFormula*>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,DelphesFormula*,less<int> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<Int_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TIndexStruct,Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Weighter::TIndexStruct,double>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Weighter::TIndexStruct,double,less<Weighter::TIndexStruct> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Delphes */
static void G__setup_memvarDelphes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   { Delphes *p; p=(Delphes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFactory),-1,-1,4,"fFactory=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FastJetFinder */
static void G__setup_memvarFastJetFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder));
   { FastJetFinder *p; p=(FastJetFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,89,0,0,-1,-1,-1,4,"fPlugin=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_fastjetcLcLJetDefinition),-1,-1,4,"fDefinition=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fKeepPileUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fJetAlgorithm=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fParameterR=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConeRadius=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSeedThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConeAreaFraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxIterations=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxPairSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIratch=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAdjacencyCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOverlapThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_fastjetcLcLAreaDefinition),-1,-1,4,"fAreaDefinition=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAreaAlgorithm=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fComputeRho=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fGhostEtaMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRepeat=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fGhostArea=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fGridScatter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPtScatter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanGhostPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEffectiveRfact=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR),G__defined_typename("map<Double_t,Double_t>"),-1,4,"fEtaRangeMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fRhoOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ParticlePropagator */
static void G__setup_memvarParticlePropagator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   { ParticlePropagator *p; p=(ParticlePropagator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRadius=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRadius2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHalfLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBz=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fKeepPileUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fChargedHadronOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fElectronOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fMuonOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Efficiency */
static void G__setup_memvarEfficiency(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   { Efficiency *p; p=(Efficiency*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EnergySmearing */
static void G__setup_memvarEnergySmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   { EnergySmearing *p; p=(EnergySmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MomentumSmearing */
static void G__setup_memvarMomentumSmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   { MomentumSmearing *p; p=(MomentumSmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Calorimeter */
static void G__setup_memvarCalorimeter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   { Calorimeter *p; p=(Calorimeter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_Candidate),-1,-1,4,"fTower=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEdges[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerECalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerHCalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackECalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackHCalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTowerTrackHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTowerPhotonHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimingEMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),G__defined_typename("TFractionMap"),-1,4,"fFractionMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),G__defined_typename("TBinMap"),-1,4,"fBinMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fEtaBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),G__defined_typename("vector<std::vector<Double_t>*>"),-1,4,"fPhiBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),G__defined_typename("vector<Long64_t>"),-1,4,"fTowerHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTowerECalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTowerHCalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTrackECalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTrackHCalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fECalResolutionFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fHCalResolutionFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTowerOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPhotonOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEFlowTrackOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEFlowTowerOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTowerTrackArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTowerTrackArray=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"electronsFromTrack=",0,"for timing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Isolation */
static void G__setup_memvarIsolation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   { Isolation *p; p=(Isolation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaRMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTRatioMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTSumMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUsePTSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_IsolationClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fNeutralFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fChargedFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItNeutralIsolationInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItChargedIsolationInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fNeutralIsolationInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fChargedIsolationInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* IsoTrackFilter */
static void G__setup_memvarIsoTrackFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter));
   { IsoTrackFilter *p; p=(IsoTrackFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaRMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTRatioMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTSumMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIsoTrackPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUsePTSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fEleFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fMuonFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fHADFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItEleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItMuonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItHADInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fMuonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fHADInputArray=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),G__defined_typename("vector<TIterator*>"),-1,4,"fAllInputList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EnergyScale */
static void G__setup_memvarEnergyScale(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   { EnergyScale *p; p=(EnergyScale*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* UniqueObjectFinder */
static void G__setup_memvarUniqueObjectFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   { UniqueObjectFinder *p; p=(UniqueObjectFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),G__defined_typename("map<TIterator*,TObjArray*>"),-1,4,"fInputMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BTagging */
static void G__setup_memvarBTagging(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   { BTagging *p; p=(BTagging*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBitNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR),G__defined_typename("map<Int_t,DelphesFormula*>"),-1,4,"fEfficiencyMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_BTaggingPartonClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TauTagging */
static void G__setup_memvarTauTagging(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   { TauTagging *p; p=(TauTagging*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR),G__defined_typename("map<Int_t,DelphesFormula*>"),-1,4,"fEfficiencyMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TauTaggingPartonClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeWriter */
static void G__setup_memvarTreeWriter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   { TreeWriter *p; p=(TreeWriter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Merger */
static void G__setup_memvarMerger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   { Merger *p; p=(Merger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),G__defined_typename("vector<TIterator*>"),-1,4,"fInputList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fMomentumOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEnergyOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LeptonDressing */
static void G__setup_memvarLeptonDressing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   { LeptonDressing *p; p=(LeptonDressing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItDressingInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fDressingInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PileUpMerger */
static void G__setup_memvarPileUpMerger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   { PileUpMerger *p; p=(PileUpMerger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanPileUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZVertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fInputBSX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fInputBSY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOutputBSX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOutputBSY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesPileUpReader),-1,-1,4,"fReader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fNPUOutputArray=",0,"!                                                                                                                                                    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JetPileUpSubtractor */
static void G__setup_memvarJetPileUpSubtractor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   { JetPileUpSubtractor *p; p=(JetPileUpSubtractor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackPileUpSubtractor */
static void G__setup_memvarTrackPileUpSubtractor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   { TrackPileUpSubtractor *p; p=(TrackPileUpSubtractor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZVertexResolution=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),G__defined_typename("map<TIterator*,TObjArray*>"),-1,4,"fInputMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fPVItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPVInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ConstituentFilter */
static void G__setup_memvarConstituentFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   { ConstituentFilter *p; p=(ConstituentFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConEMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),G__defined_typename("vector<TIterator*>"),-1,4,"fInputList=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),G__defined_typename("map<TIterator*,TObjArray*>"),-1,4,"fInputMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* StatusPidFilter */
static void G__setup_memvarStatusPidFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   { StatusPidFilter *p; p=(StatusPidFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTMin=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cloner */
static void G__setup_memvarCloner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   { Cloner *p; p=(Cloner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Weighter */
static void G__setup_memvarWeighter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   { Weighter *p; p=(Weighter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),G__defined_typename("set<Int_t>"),-1,4,"fWeightSet=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR),G__defined_typename("set<Int_t>"),-1,4,"fCodeSet=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR),G__defined_typename("map<TIndexStruct,Double_t>"),-1,4,"fWeightMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ExampleModule */
static void G__setup_memvarExampleModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   { ExampleModule *p; p=(ExampleModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIntParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDoubleParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("deque<Double_t>"),-1,4,"fArrayParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PileUpJetID */
static void G__setup_memvarPileUpJetID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   { PileUpJetID *p; p=(PileUpJetID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fParameterR=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanSqDeltaRMaxBarrel=",0,"|eta| < 1.5");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBetaMinBarrel=",0,"|eta| < 2.5");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanSqDeltaRMaxEndcap=",0,"1.5 < |eta| < 4.0");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBetaMinEndcap=",0,"1.5 < |eta| < 4.0");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanSqDeltaRMaxForward=",0,"|eta| > 4.0");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNeutralPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMinForNeutrals=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUseConstituents=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAverageEachTower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,"SCZ");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fNeutralInputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,"SCZ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItNeutralInputArray=",0,"SCZ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fNeutralsInPassingJets=",0,"SCZ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ModifyBeamSpot */
static void G__setup_memvarModifyBeamSpot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot));
   { ModifyBeamSpot *p; p=(ModifyBeamSpot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZVertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"currentZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"currentT=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"currentPU=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPVOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GenBeamSpotFilter */
static void G__setup_memvarGenBeamSpotFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter));
   { GenBeamSpotFilter *p; p=(GenBeamSpotFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTMin=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPassedOne=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RunPUPPI */
static void G__setup_memvarRunPUPPI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI));
   { RunPUPPI *p; p=(RunPUPPI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackerEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItNeutralInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fNeutralInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* NeutrinoFilter */
static void G__setup_memvarNeutrinoFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter));
   { NeutrinoFilter *p; p=(NeutrinoFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTMin=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarModulesDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDelphes(void) {
   /* Delphes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   G__memfunc_setup("Delphes",709,G__ModulesDict_448_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Delphes), -1, 0, 1, 1, 1, 0, "C - - 10 '\"Delphes\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTreeWriter",1337,G__ModulesDict_448_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ExRootTreeWriter' - 0 - treeWriter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFactory",1016,G__ModulesDict_448_0_3, 85, G__get_linked_tagnum(&G__ModulesDictLN_DelphesFactory), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__ModulesDict_448_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_448_0_8, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Delphes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_448_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Delphes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_448_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Delphes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_448_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Delphes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_448_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_448_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Delphes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_448_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Delphes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_448_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Delphes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_448_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Delphes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Delphes", 709, G__ModulesDict_448_0_20, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Delphes), -1, 0, 1, 1, 1, 0, "u 'Delphes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Delphes", 835, G__ModulesDict_448_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_448_0_22, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_Delphes), -1, 1, 1, 1, 1, 0, "u 'Delphes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFastJetFinder(void) {
   /* FastJetFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder));
   G__memfunc_setup("FastJetFinder",1289,G__ModulesDict_453_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_453_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FastJetFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_453_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FastJetFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_453_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FastJetFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_453_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FastJetFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_453_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_453_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FastJetFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_453_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FastJetFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_453_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FastJetFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_453_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FastJetFinder::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FastJetFinder", 1289, G__ModulesDict_453_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_FastJetFinder), -1, 0, 1, 1, 1, 0, "u 'FastJetFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FastJetFinder", 1415, G__ModulesDict_453_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncParticlePropagator(void) {
   /* ParticlePropagator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   G__memfunc_setup("ParticlePropagator",1875,G__ModulesDict_454_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_454_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ParticlePropagator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_454_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticlePropagator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_454_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ParticlePropagator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_454_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ParticlePropagator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_454_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_454_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticlePropagator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_454_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ParticlePropagator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_454_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticlePropagator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_454_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ParticlePropagator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ParticlePropagator", 1875, G__ModulesDict_454_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator), -1, 0, 1, 1, 1, 0, "u 'ParticlePropagator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ParticlePropagator", 2001, G__ModulesDict_454_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEfficiency(void) {
   /* Efficiency */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   G__memfunc_setup("Efficiency",1013,G__ModulesDict_456_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Efficiency), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_456_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Efficiency::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_456_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Efficiency::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_456_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Efficiency::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_456_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Efficiency::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_456_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_456_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Efficiency::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_456_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Efficiency::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_456_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Efficiency::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_456_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Efficiency::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Efficiency", 1013, G__ModulesDict_456_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Efficiency), -1, 0, 1, 1, 1, 0, "u 'Efficiency' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Efficiency", 1139, G__ModulesDict_456_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEnergySmearing(void) {
   /* EnergySmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   G__memfunc_setup("EnergySmearing",1440,G__ModulesDict_457_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_457_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EnergySmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_457_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergySmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_457_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EnergySmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_457_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EnergySmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_457_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_457_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergySmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_457_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergySmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_457_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergySmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_457_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergySmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EnergySmearing", 1440, G__ModulesDict_457_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing), -1, 0, 1, 1, 1, 0, "u 'EnergySmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EnergySmearing", 1566, G__ModulesDict_457_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMomentumSmearing(void) {
   /* MomentumSmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   G__memfunc_setup("MomentumSmearing",1672,G__ModulesDict_458_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_458_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MomentumSmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_458_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MomentumSmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_458_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MomentumSmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_458_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MomentumSmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_458_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_458_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MomentumSmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_458_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MomentumSmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_458_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MomentumSmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_458_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MomentumSmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MomentumSmearing", 1672, G__ModulesDict_458_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing), -1, 0, 1, 1, 1, 0, "u 'MomentumSmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MomentumSmearing", 1798, G__ModulesDict_458_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCalorimeter(void) {
   /* Calorimeter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   G__memfunc_setup("Calorimeter",1143,G__ModulesDict_515_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeTower",1347,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogNormal",907,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_515_0_7, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Calorimeter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_515_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Calorimeter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_515_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Calorimeter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_515_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Calorimeter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_515_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_515_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Calorimeter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_515_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Calorimeter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_515_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Calorimeter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_515_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Calorimeter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Calorimeter", 1143, G__ModulesDict_515_0_19, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter), -1, 0, 1, 1, 1, 0, "u 'Calorimeter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Calorimeter", 1269, G__ModulesDict_515_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncIsolation(void) {
   /* Isolation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   G__memfunc_setup("Isolation",946,G__ModulesDict_538_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Isolation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_538_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Isolation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_538_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isolation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_538_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Isolation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_538_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Isolation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_538_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_538_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isolation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_538_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isolation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_538_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isolation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_538_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isolation::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Isolation", 946, G__ModulesDict_538_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Isolation), -1, 0, 1, 1, 1, 0, "u 'Isolation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Isolation", 1072, G__ModulesDict_538_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncIsoTrackFilter(void) {
   /* IsoTrackFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter));
   G__memfunc_setup("IsoTrackFilter",1414,G__ModulesDict_540_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsoTrackSelector",1633,G__ModulesDict_540_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TIterator*,allocator<TIterator*> >' 'vector<TIterator*>' 1 - fAllInputList U 'ExRootFilter' - 0 - fCandidateFilter "
"g - - 0 - IsEM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_540_0_6, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&IsoTrackFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_540_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IsoTrackFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_540_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&IsoTrackFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_540_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&IsoTrackFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_540_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_540_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IsoTrackFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_540_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&IsoTrackFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_540_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IsoTrackFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_540_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&IsoTrackFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("IsoTrackFilter", 1414, G__ModulesDict_540_0_18, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_IsoTrackFilter), -1, 0, 1, 1, 1, 0, "u 'IsoTrackFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~IsoTrackFilter", 1540, G__ModulesDict_540_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEnergyScale(void) {
   /* EnergyScale */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   G__memfunc_setup("EnergyScale",1106,G__ModulesDict_545_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_545_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EnergyScale::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_545_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergyScale::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_545_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EnergyScale::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_545_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EnergyScale::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_545_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_545_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergyScale::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_545_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergyScale::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_545_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergyScale::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_545_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergyScale::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EnergyScale", 1106, G__ModulesDict_545_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale), -1, 0, 1, 1, 1, 0, "u 'EnergyScale' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EnergyScale", 1232, G__ModulesDict_545_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncUniqueObjectFinder(void) {
   /* UniqueObjectFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   G__memfunc_setup("UniqueObjectFinder",1830,G__ModulesDict_546_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Unique",631,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'Candidate' - 0 - candidate u 'map<TIterator*,TObjArray*,less<TIterator*>,allocator<pair<TIterator* const,TObjArray*> > >::iterator' - 0 - itInputMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_546_0_6, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&UniqueObjectFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_546_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UniqueObjectFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_546_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&UniqueObjectFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_546_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&UniqueObjectFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_546_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_546_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UniqueObjectFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_546_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UniqueObjectFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_546_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UniqueObjectFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_546_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UniqueObjectFinder::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("UniqueObjectFinder", 1830, G__ModulesDict_546_0_18, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder), -1, 0, 1, 1, 1, 0, "u 'UniqueObjectFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~UniqueObjectFinder", 1956, G__ModulesDict_546_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_546_0_20, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder), -1, 1, 1, 1, 1, 0, "u 'UniqueObjectFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBTagging(void) {
   /* BTagging */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   G__memfunc_setup("BTagging",771,G__ModulesDict_557_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_BTagging), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_557_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BTagging::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_557_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BTagging::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_557_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BTagging::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_557_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BTagging::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_557_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_557_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BTagging::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_557_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BTagging::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_557_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BTagging::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_557_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BTagging::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BTagging", 771, G__ModulesDict_557_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_BTagging), -1, 0, 1, 1, 1, 0, "u 'BTagging' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BTagging", 897, G__ModulesDict_557_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTauTagging(void) {
   /* TauTagging */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   G__memfunc_setup("TauTagging",1003,G__ModulesDict_566_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TauTagging), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_566_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TauTagging::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_566_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauTagging::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_566_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TauTagging::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_566_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TauTagging::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_566_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_566_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauTagging::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_566_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TauTagging::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_566_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauTagging::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_566_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TauTagging::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TauTagging", 1003, G__ModulesDict_566_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_TauTagging), -1, 0, 1, 1, 1, 0, "u 'TauTagging' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TauTagging", 1129, G__ModulesDict_566_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeWriter(void) {
   /* TreeWriter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   G__memfunc_setup("TreeWriter",1037,G__ModulesDict_568_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillParticles",1326,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'Candidate' - 0 - candidate U 'TRefArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessParticles",1670,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessTracks",1351,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessTowers",1379,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessPhotons",1482,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessElectrons",1678,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessMuons",1265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessTauJets",1439,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessJets",1141,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessMissingET",1618,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessIsoTracks",1650,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessScalarHT",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessRho",1032,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessWeight",1351,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_568_0_19, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TreeWriter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_568_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeWriter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_568_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TreeWriter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_568_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TreeWriter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_568_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_568_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeWriter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_568_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeWriter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_568_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeWriter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_568_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeWriter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TreeWriter", 1037, G__ModulesDict_568_0_31, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter), -1, 0, 1, 1, 1, 0, "u 'TreeWriter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeWriter", 1163, G__ModulesDict_568_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_568_0_33, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter), -1, 1, 1, 1, 1, 0, "u 'TreeWriter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMerger(void) {
   /* Merger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   G__memfunc_setup("Merger",610,G__ModulesDict_569_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Merger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_569_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Merger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_569_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Merger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_569_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Merger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_569_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Merger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_569_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_569_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Merger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_569_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Merger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_569_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Merger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_569_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Merger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Merger", 610, G__ModulesDict_569_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Merger), -1, 0, 1, 1, 1, 0, "u 'Merger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Merger", 736, G__ModulesDict_569_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_569_0_19, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_Merger), -1, 1, 1, 1, 1, 0, "u 'Merger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLeptonDressing(void) {
   /* LeptonDressing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   G__memfunc_setup("LeptonDressing",1457,G__ModulesDict_570_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_570_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LeptonDressing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_570_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LeptonDressing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_570_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LeptonDressing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_570_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LeptonDressing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_570_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_570_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LeptonDressing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_570_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LeptonDressing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_570_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LeptonDressing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_570_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LeptonDressing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LeptonDressing", 1457, G__ModulesDict_570_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing), -1, 0, 1, 1, 1, 0, "u 'LeptonDressing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LeptonDressing", 1583, G__ModulesDict_570_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPileUpMerger(void) {
   /* PileUpMerger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   G__memfunc_setup("PileUpMerger",1201,G__ModulesDict_572_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_572_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PileUpMerger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_572_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpMerger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_572_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PileUpMerger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_572_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PileUpMerger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_572_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_572_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpMerger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_572_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpMerger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_572_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpMerger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_572_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpMerger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PileUpMerger", 1201, G__ModulesDict_572_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger), -1, 0, 1, 1, 1, 0, "u 'PileUpMerger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PileUpMerger", 1327, G__ModulesDict_572_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJetPileUpSubtractor(void) {
   /* JetPileUpSubtractor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   G__memfunc_setup("JetPileUpSubtractor",1947,G__ModulesDict_591_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_591_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&JetPileUpSubtractor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_591_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetPileUpSubtractor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_591_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&JetPileUpSubtractor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_591_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&JetPileUpSubtractor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_591_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_591_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetPileUpSubtractor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_591_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JetPileUpSubtractor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_591_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetPileUpSubtractor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_591_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JetPileUpSubtractor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("JetPileUpSubtractor", 1947, G__ModulesDict_591_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor), -1, 0, 1, 1, 1, 0, "u 'JetPileUpSubtractor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JetPileUpSubtractor", 2073, G__ModulesDict_591_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackPileUpSubtractor(void) {
   /* TrackPileUpSubtractor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   G__memfunc_setup("TrackPileUpSubtractor",2157,G__ModulesDict_592_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_592_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackPileUpSubtractor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_592_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPileUpSubtractor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_592_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackPileUpSubtractor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_592_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackPileUpSubtractor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_592_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_592_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPileUpSubtractor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_592_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackPileUpSubtractor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_592_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPileUpSubtractor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_592_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackPileUpSubtractor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrackPileUpSubtractor", 2157, G__ModulesDict_592_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor), -1, 0, 1, 1, 1, 0, "u 'TrackPileUpSubtractor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackPileUpSubtractor", 2283, G__ModulesDict_592_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncConstituentFilter(void) {
   /* ConstituentFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   G__memfunc_setup("ConstituentFilter",1798,G__ModulesDict_593_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_593_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ConstituentFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_593_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ConstituentFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_593_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ConstituentFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_593_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ConstituentFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_593_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_593_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ConstituentFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_593_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ConstituentFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_593_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ConstituentFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_593_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ConstituentFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ConstituentFilter", 1798, G__ModulesDict_593_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter), -1, 0, 1, 1, 1, 0, "u 'ConstituentFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ConstituentFilter", 1924, G__ModulesDict_593_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_593_0_19, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter), -1, 1, 1, 1, 1, 0, "u 'ConstituentFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncStatusPidFilter(void) {
   /* StatusPidFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   G__memfunc_setup("StatusPidFilter",1543,G__ModulesDict_594_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_594_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&StatusPidFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_594_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StatusPidFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_594_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&StatusPidFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_594_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&StatusPidFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_594_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_594_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StatusPidFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_594_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&StatusPidFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_594_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StatusPidFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_594_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&StatusPidFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("StatusPidFilter", 1543, G__ModulesDict_594_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter), -1, 0, 1, 1, 1, 0, "u 'StatusPidFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StatusPidFilter", 1669, G__ModulesDict_594_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCloner(void) {
   /* Cloner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   G__memfunc_setup("Cloner",611,G__ModulesDict_595_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Cloner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_595_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cloner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_595_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cloner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_595_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cloner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_595_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cloner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_595_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_595_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cloner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_595_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cloner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_595_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cloner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_595_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cloner::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Cloner", 611, G__ModulesDict_595_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Cloner), -1, 0, 1, 1, 1, 0, "u 'Cloner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cloner", 737, G__ModulesDict_595_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWeighter(void) {
   /* Weighter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   G__memfunc_setup("Weighter",831,G__ModulesDict_596_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Weighter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_596_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Weighter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_596_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weighter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_596_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Weighter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_596_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Weighter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_596_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_596_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weighter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_596_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Weighter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_596_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weighter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_596_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Weighter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Weighter", 831, G__ModulesDict_596_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Weighter), -1, 0, 1, 1, 1, 0, "u 'Weighter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Weighter", 957, G__ModulesDict_596_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncExampleModule(void) {
   /* ExampleModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   G__memfunc_setup("ExampleModule",1330,G__ModulesDict_607_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_607_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ExampleModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_607_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExampleModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_607_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ExampleModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_607_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ExampleModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_607_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_607_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExampleModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_607_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ExampleModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_607_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExampleModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_607_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ExampleModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ExampleModule", 1330, G__ModulesDict_607_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule), -1, 0, 1, 1, 1, 0, "u 'ExampleModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ExampleModule", 1456, G__ModulesDict_607_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPileUpJetID(void) {
   /* PileUpJetID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   G__memfunc_setup("PileUpJetID",1023,G__ModulesDict_608_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_608_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PileUpJetID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_608_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpJetID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_608_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PileUpJetID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_608_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PileUpJetID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_608_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_608_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpJetID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_608_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpJetID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_608_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpJetID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_608_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpJetID::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PileUpJetID", 1023, G__ModulesDict_608_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID), -1, 0, 1, 1, 1, 0, "u 'PileUpJetID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PileUpJetID", 1149, G__ModulesDict_608_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncModifyBeamSpot(void) {
   /* ModifyBeamSpot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot));
   G__memfunc_setup("ModifyBeamSpot",1411,G__ModulesDict_609_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_609_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ModifyBeamSpot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_609_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ModifyBeamSpot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_609_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ModifyBeamSpot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_609_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ModifyBeamSpot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_609_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_609_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ModifyBeamSpot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_609_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ModifyBeamSpot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_609_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ModifyBeamSpot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_609_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ModifyBeamSpot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ModifyBeamSpot", 1411, G__ModulesDict_609_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ModifyBeamSpot), -1, 0, 1, 1, 1, 0, "u 'ModifyBeamSpot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ModifyBeamSpot", 1537, G__ModulesDict_609_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGenBeamSpotFilter(void) {
   /* GenBeamSpotFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter));
   G__memfunc_setup("GenBeamSpotFilter",1691,G__ModulesDict_610_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_610_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GenBeamSpotFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_610_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenBeamSpotFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_610_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GenBeamSpotFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_610_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GenBeamSpotFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_610_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_610_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenBeamSpotFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_610_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GenBeamSpotFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_610_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenBeamSpotFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_610_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GenBeamSpotFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GenBeamSpotFilter", 1691, G__ModulesDict_610_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_GenBeamSpotFilter), -1, 0, 1, 1, 1, 0, "u 'GenBeamSpotFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenBeamSpotFilter", 1817, G__ModulesDict_610_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRunPUPPI(void) {
   /* RunPUPPI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI));
   G__memfunc_setup("RunPUPPI",707,G__ModulesDict_611_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_611_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RunPUPPI::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_611_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunPUPPI::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_611_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RunPUPPI::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_611_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RunPUPPI::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_611_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_611_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunPUPPI::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_611_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RunPUPPI::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_611_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunPUPPI::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_611_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RunPUPPI::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RunPUPPI", 707, G__ModulesDict_611_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_RunPUPPI), -1, 0, 1, 1, 1, 0, "u 'RunPUPPI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RunPUPPI", 833, G__ModulesDict_611_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncNeutrinoFilter(void) {
   /* NeutrinoFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter));
   G__memfunc_setup("NeutrinoFilter",1466,G__ModulesDict_612_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_612_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&NeutrinoFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_612_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NeutrinoFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_612_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&NeutrinoFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_612_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&NeutrinoFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_612_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_612_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NeutrinoFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_612_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&NeutrinoFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_612_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&NeutrinoFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_612_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&NeutrinoFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("NeutrinoFilter", 1466, G__ModulesDict_612_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_NeutrinoFilter), -1, 0, 1, 1, 1, 0, "u 'NeutrinoFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~NeutrinoFilter", 1592, G__ModulesDict_612_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncModulesDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalModulesDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcModulesDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ModulesDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR = { "vector<long long,allocator<long long> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ModulesDictLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR = { "map<double,double,less<double>,allocator<pair<const double,double> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR = { "map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootTask = { "ExRootTask" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootTreeBranch = { "ExRootTreeBranch" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootTreeWriter = { "ExRootTreeWriter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesFactory = { "DelphesFactory" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesModule = { "DelphesModule" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Delphes = { "Delphes" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_fastjet = { "fastjet" , 110 , -1 };
G__linked_taginfo G__ModulesDictLN_fastjetcLcLJetDefinition = { "fastjet::JetDefinition" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_fastjetcLcLAreaDefinition = { "fastjet::AreaDefinition" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_FastJetFinder = { "FastJetFinder" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ParticlePropagator = { "ParticlePropagator" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesFormula = { "DelphesFormula" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Efficiency = { "Efficiency" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_EnergySmearing = { "EnergySmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_MomentumSmearing = { "MomentumSmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR = { "set<int,less<int>,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR = { "set<double,less<double>,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Candidate = { "Candidate" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Calorimeter = { "Calorimeter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR = { "map<long long,pair<double,double>,less<long long>,allocator<pair<const long long,pair<double,double> > > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<double,set<double,less<double>,allocator<double> >,less<double>,allocator<pair<const double,set<double,less<double>,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR = { "vector<vector<double,allocator<double> >*,allocator<vector<double,allocator<double> >*> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >*,allocator<vector<double,allocator<double> >*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootFilter = { "ExRootFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_IsolationClassifier = { "IsolationClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Isolation = { "Isolation" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_IsoTrackClassifier = { "IsoTrackClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_IsoTrackFilter = { "IsoTrackFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR = { "vector<TIterator*,allocator<TIterator*> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TIterator*,allocator<TIterator*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_EnergyScale = { "EnergyScale" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_UniqueObjectFinder = { "UniqueObjectFinder" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR = { "map<TIterator*,TObjArray*,less<TIterator*>,allocator<pair<TIterator* const,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgRcLcLiterator = { "map<TIterator*,TObjArray*,less<TIterator*>,allocator<pair<TIterator* const,TObjArray*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_BTaggingPartonClassifier = { "BTaggingPartonClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_BTagging = { "BTagging" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR = { "map<int,DelphesFormula*,less<int>,allocator<pair<const int,DelphesFormula*> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TauTaggingPartonClassifier = { "TauTaggingPartonClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TauTagging = { "TauTagging" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TreeWriter = { "TreeWriter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Merger = { "Merger" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_LeptonDressing = { "LeptonDressing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesPileUpReader = { "DelphesPileUpReader" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_PileUpMerger = { "PileUpMerger" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR = { "deque<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_JetPileUpSubtractor = { "JetPileUpSubtractor" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TrackPileUpSubtractor = { "TrackPileUpSubtractor" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ConstituentFilter = { "ConstituentFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_StatusPidFilter = { "StatusPidFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Cloner = { "Cloner" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Weighter = { "Weighter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR = { "map<Weighter::TIndexStruct,double,less<Weighter::TIndexStruct>,allocator<pair<const Weighter::TIndexStruct,double> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExampleModule = { "ExampleModule" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_PileUpJetID = { "PileUpJetID" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ModifyBeamSpot = { "ModifyBeamSpot" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_GenBeamSpotFilter = { "GenBeamSpotFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_RunPUPPI = { "RunPUPPI" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_NeutrinoFilter = { "NeutrinoFilter" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableModulesDict() {
  G__ModulesDictLN_TClass.tagnum = -1 ;
  G__ModulesDictLN_TBuffer.tagnum = -1 ;
  G__ModulesDictLN_TMemberInspector.tagnum = -1 ;
  G__ModulesDictLN_TObject.tagnum = -1 ;
  G__ModulesDictLN_TNamed.tagnum = -1 ;
  G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR.tagnum = -1 ;
  G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_TObjArray.tagnum = -1 ;
  G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_TIterator.tagnum = -1 ;
  G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ModulesDictLN_TTask.tagnum = -1 ;
  G__ModulesDictLN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_ExRootTask.tagnum = -1 ;
  G__ModulesDictLN_ExRootTreeBranch.tagnum = -1 ;
  G__ModulesDictLN_ExRootTreeWriter.tagnum = -1 ;
  G__ModulesDictLN_DelphesFactory.tagnum = -1 ;
  G__ModulesDictLN_DelphesModule.tagnum = -1 ;
  G__ModulesDictLN_Delphes.tagnum = -1 ;
  G__ModulesDictLN_fastjet.tagnum = -1 ;
  G__ModulesDictLN_fastjetcLcLJetDefinition.tagnum = -1 ;
  G__ModulesDictLN_fastjetcLcLAreaDefinition.tagnum = -1 ;
  G__ModulesDictLN_FastJetFinder.tagnum = -1 ;
  G__ModulesDictLN_ParticlePropagator.tagnum = -1 ;
  G__ModulesDictLN_DelphesFormula.tagnum = -1 ;
  G__ModulesDictLN_Efficiency.tagnum = -1 ;
  G__ModulesDictLN_EnergySmearing.tagnum = -1 ;
  G__ModulesDictLN_MomentumSmearing.tagnum = -1 ;
  G__ModulesDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ModulesDictLN_Candidate.tagnum = -1 ;
  G__ModulesDictLN_Calorimeter.tagnum = -1 ;
  G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_ExRootFilter.tagnum = -1 ;
  G__ModulesDictLN_IsolationClassifier.tagnum = -1 ;
  G__ModulesDictLN_Isolation.tagnum = -1 ;
  G__ModulesDictLN_IsoTrackClassifier.tagnum = -1 ;
  G__ModulesDictLN_IsoTrackFilter.tagnum = -1 ;
  G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_EnergyScale.tagnum = -1 ;
  G__ModulesDictLN_UniqueObjectFinder.tagnum = -1 ;
  G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__ModulesDictLN_BTaggingPartonClassifier.tagnum = -1 ;
  G__ModulesDictLN_BTagging.tagnum = -1 ;
  G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_TauTaggingPartonClassifier.tagnum = -1 ;
  G__ModulesDictLN_TauTagging.tagnum = -1 ;
  G__ModulesDictLN_TRefArray.tagnum = -1 ;
  G__ModulesDictLN_TreeWriter.tagnum = -1 ;
  G__ModulesDictLN_Merger.tagnum = -1 ;
  G__ModulesDictLN_LeptonDressing.tagnum = -1 ;
  G__ModulesDictLN_DelphesPileUpReader.tagnum = -1 ;
  G__ModulesDictLN_PileUpMerger.tagnum = -1 ;
  G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ModulesDictLN_JetPileUpSubtractor.tagnum = -1 ;
  G__ModulesDictLN_TrackPileUpSubtractor.tagnum = -1 ;
  G__ModulesDictLN_ConstituentFilter.tagnum = -1 ;
  G__ModulesDictLN_StatusPidFilter.tagnum = -1 ;
  G__ModulesDictLN_Cloner.tagnum = -1 ;
  G__ModulesDictLN_Weighter.tagnum = -1 ;
  G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_ExampleModule.tagnum = -1 ;
  G__ModulesDictLN_PileUpJetID.tagnum = -1 ;
  G__ModulesDictLN_ModifyBeamSpot.tagnum = -1 ;
  G__ModulesDictLN_GenBeamSpotFilter.tagnum = -1 ;
  G__ModulesDictLN_RunPUPPI.tagnum = -1 ;
  G__ModulesDictLN_NeutrinoFilter.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableModulesDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TTask);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplEdoublecOdoublecOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootTask);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootTreeBranch);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootTreeWriter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesFactory);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Delphes),sizeof(Delphes),-1,324864,(char*)NULL,G__setup_memvarDelphes,G__setup_memfuncDelphes);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_fastjet);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_fastjetcLcLJetDefinition);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_fastjetcLcLAreaDefinition);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_FastJetFinder),sizeof(FastJetFinder),-1,324864,(char*)NULL,G__setup_memvarFastJetFinder,G__setup_memfuncFastJetFinder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ParticlePropagator),sizeof(ParticlePropagator),-1,324864,(char*)NULL,G__setup_memvarParticlePropagator,G__setup_memfuncParticlePropagator);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesFormula);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Efficiency),sizeof(Efficiency),-1,324864,(char*)NULL,G__setup_memvarEfficiency,G__setup_memfuncEfficiency);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_EnergySmearing),sizeof(EnergySmearing),-1,324864,(char*)NULL,G__setup_memvarEnergySmearing,G__setup_memfuncEnergySmearing);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_MomentumSmearing),sizeof(MomentumSmearing),-1,324864,(char*)NULL,G__setup_memvarMomentumSmearing,G__setup_memfuncMomentumSmearing);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_setlEintcOlesslEintgRcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_Candidate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Calorimeter),sizeof(Calorimeter),-1,324864,(char*)NULL,G__setup_memvarCalorimeter,G__setup_memfuncCalorimeter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootFilter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_IsolationClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Isolation),sizeof(Isolation),-1,324864,(char*)NULL,G__setup_memvarIsolation,G__setup_memfuncIsolation);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_IsoTrackClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_IsoTrackFilter),sizeof(IsoTrackFilter),-1,324864,(char*)NULL,G__setup_memvarIsoTrackFilter,G__setup_memfuncIsoTrackFilter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_EnergyScale),sizeof(EnergyScale),-1,324864,(char*)NULL,G__setup_memvarEnergyScale,G__setup_memfuncEnergyScale);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_UniqueObjectFinder),sizeof(UniqueObjectFinder),-1,324864,(char*)NULL,G__setup_memvarUniqueObjectFinder,G__setup_memfuncUniqueObjectFinder);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_BTaggingPartonClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_BTagging),sizeof(BTagging),-1,324864,(char*)NULL,G__setup_memvarBTagging,G__setup_memfuncBTagging);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplEintcODelphesFormulamUcOlesslEintgRcOallocatorlEpairlEconstsPintcODelphesFormulamUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TauTaggingPartonClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TauTagging),sizeof(TauTagging),-1,324864,(char*)NULL,G__setup_memvarTauTagging,G__setup_memfuncTauTagging);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TRefArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TreeWriter),sizeof(TreeWriter),-1,324864,(char*)NULL,G__setup_memvarTreeWriter,G__setup_memfuncTreeWriter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Merger),sizeof(Merger),-1,324864,(char*)NULL,G__setup_memvarMerger,G__setup_memfuncMerger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_LeptonDressing),sizeof(LeptonDressing),-1,324864,(char*)NULL,G__setup_memvarLeptonDressing,G__setup_memfuncLeptonDressing);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesPileUpReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_PileUpMerger),sizeof(PileUpMerger),-1,324864,(char*)NULL,G__setup_memvarPileUpMerger,G__setup_memfuncPileUpMerger);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_JetPileUpSubtractor),sizeof(JetPileUpSubtractor),-1,324864,(char*)NULL,G__setup_memvarJetPileUpSubtractor,G__setup_memfuncJetPileUpSubtractor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TrackPileUpSubtractor),sizeof(TrackPileUpSubtractor),-1,324864,(char*)NULL,G__setup_memvarTrackPileUpSubtractor,G__setup_memfuncTrackPileUpSubtractor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ConstituentFilter),sizeof(ConstituentFilter),-1,324864,(char*)NULL,G__setup_memvarConstituentFilter,G__setup_memfuncConstituentFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_StatusPidFilter),sizeof(StatusPidFilter),-1,324864,(char*)NULL,G__setup_memvarStatusPidFilter,G__setup_memfuncStatusPidFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Cloner),sizeof(Cloner),-1,324864,(char*)NULL,G__setup_memvarCloner,G__setup_memfuncCloner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Weighter),sizeof(Weighter),-1,324864,(char*)NULL,G__setup_memvarWeighter,G__setup_memfuncWeighter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplEWeightercLcLTIndexStructcOdoublecOlesslEWeightercLcLTIndexStructgRcOallocatorlEpairlEconstsPWeightercLcLTIndexStructcOdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExampleModule),sizeof(ExampleModule),-1,324864,(char*)NULL,G__setup_memvarExampleModule,G__setup_memfuncExampleModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_PileUpJetID),sizeof(PileUpJetID),-1,324864,(char*)NULL,G__setup_memvarPileUpJetID,G__setup_memfuncPileUpJetID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ModifyBeamSpot),sizeof(ModifyBeamSpot),-1,324864,(char*)NULL,G__setup_memvarModifyBeamSpot,G__setup_memfuncModifyBeamSpot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_GenBeamSpotFilter),sizeof(GenBeamSpotFilter),-1,324864,(char*)NULL,G__setup_memvarGenBeamSpotFilter,G__setup_memfuncGenBeamSpotFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_RunPUPPI),sizeof(RunPUPPI),-1,324864,(char*)NULL,G__setup_memvarRunPUPPI,G__setup_memfuncRunPUPPI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_NeutrinoFilter),sizeof(NeutrinoFilter),-1,324864,(char*)NULL,G__setup_memvarNeutrinoFilter,G__setup_memfuncNeutrinoFilter);
}
extern "C" void G__cpp_setupModulesDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupModulesDict()");
  G__set_cpp_environmentModulesDict();
  G__cpp_setup_tagtableModulesDict();

  G__cpp_setup_inheritanceModulesDict();

  G__cpp_setup_typetableModulesDict();

  G__cpp_setup_memvarModulesDict();

  G__cpp_setup_memfuncModulesDict();
  G__cpp_setup_globalModulesDict();
  G__cpp_setup_funcModulesDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncModulesDict();
  return;
}
class G__cpp_setup_initModulesDict {
  public:
    G__cpp_setup_initModulesDict() { G__add_setup_func("ModulesDict",(G__incsetup)(&G__cpp_setupModulesDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initModulesDict() { G__remove_setup_func("ModulesDict"); }
};
G__cpp_setup_initModulesDict G__cpp_setup_initializerModulesDict;

